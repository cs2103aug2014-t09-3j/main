//@author: a0112220j



	/**
	 * origin: C:\Users\Galaxy\Documents\CS2103T\src\EzController.java
	 */

public class EzController {

	private static final int MAX_SIZE = 20;

	private static EzStorage storage = new EzStorage();
	private static EzAction deleteAction = null;
	private static ArrayList<EzAction> history = new ArrayList<EzAction>();
	private static String prevTab;
	private static int pos = -1;
	private static boolean confirmation = false;
	private static boolean testing = false;

	/**
	 * This method takes in raw user input and pass it to the parser to generate an userAction object
	 * a feedback is returned after execution
	 * @param userCommand 
	 * @return feedback of the operation
	 */
	public static String execute(String userCommand){
		EzAction userAction = EzParser.extractInfo(userCommand, storage);
		determineUserAction(userAction);
		return userAction.getFeedback();
	}

	/**
	 * This method determine the intention of the user through userAction object
	 * @param userAction
	 */
	public static void determineUserAction(EzAction userAction) {
		switch(userAction.getAction()) {
		case ADD:
			addTask(userAction);
			break;

		case UPDATE:
			updateTask(userAction);
			break;

		case DELETE:
			deleteTask(userAction);
			break;

		case Y:
			confirmDelete(userAction);
			break;

		case N:
			abortDelete(userAction);
			break;

		case DONE:
			updateTask(userAction);
			break;

		case UNDONE:
			updateTask(userAction);
			break;

		case SORT:
			sortTask(userAction, EzGUI.getCurrentTab());
			break;

		case REMOVE:
			updateTask(userAction);
			break;

		case PAGE:
			navigatePage(userAction);
			break;

		case UNDO:
			undoAction(userAction);
			break;

		case REDO:
			redoAction(userAction);
			break;

		case SHOW:
			showTask(userAction);
			break;

		default:
			break;
		}
	}

	
	/**
	 * This method adds a task to the list of task in storage
	 * @param userAction
	 */
	private static void addTask(EzAction userAction) {
		if (!confirmation){
			EzTask task = userAction.getResults().get(0);
			checkPos();
			addHistory(userAction);
			String currTab = EzGUI.getCurrentTab();
			ArrayList<EzTask> listBeforeAdd = EzGUI.getTaskListOfTheTab(currTab);
			int sizeOfList;
			if(listBeforeAdd == null) {
				sizeOfList = 0;
			}
			else {
				sizeOfList = listBeforeAdd.size();
			}
			storage.addTaskWithNewId(task);
			if(!testing) {
				try {
					EzDataManage.saveToFile(storage);
				} catch (IOException e) {
					e.printStackTrace();
				}
				if(currTab != null && !currTab.equalsIgnoreCase("help")) {
					int newSizeOfList = EzGUI.getTaskListOfTheTab(currTab).size();
					if(sizeOfList != newSizeOfList) {
						ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(currTab);
						EzGUI.showContent(currTab, list, task);
					}
					else {
						ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(currTab);
						EzGUI.showContent(currTab, list, EzGUI.getPage());
					}
				}
				else {
					EzGUI.refreshButton();
				}
			}
		}
	}

	/**
	 * This method update a task or a list of tasks to their new attributes
	 * @param userAction
	 */
	private static void updateTask(EzAction userAction) {
		if (!confirmation){
			storage.updateTask(userAction.getResults());
			checkPos();
			addHistory(userAction);
			if(!testing) {
				try {
					EzDataManage.saveToFile(storage);
				} catch (IOException e) {
					e.printStackTrace();
				}
				String currTab = EzGUI.getCurrentTab();
				if(currTab != null && !currTab.equalsIgnoreCase("help")) {
					ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(currTab);
					EzGUI.showContent(currTab, list, EzGUI.getPage());
				}
				else {
					EzGUI.refreshButton();
				}
			}
		}
	}

	/**
	 * This method prepares the deletion and wait for user's confirmation
	 * @param userAction
	 */
	private static void deleteTask(EzAction userAction) {
		if (!confirmation){
			deleteAction = userAction;
			ArrayList<EzTask> toBeDeleted = userAction.getTargets();
			confirmation = true;
			assert(toBeDeleted.size() >= 0);
			if(!testing) {
				prevTab = EzGUI.getCurrentTab();
				EzGUI.unhighlightButton();
				if(toBeDeleted.size() == 1) {
					EzGUI.showContent("Are you sure to delete this task? (Y/N)", toBeDeleted);
				}
				else if(toBeDeleted.size() > 1) {
					EzGUI.showContent("Are you sure to delete these tasks? (Y/N)", toBeDeleted);
				}
			}
		}
	}

	/**
	 * This method proceed the deletion if the user enter a Y
	 * @param userAction
	 */
	private static void confirmDelete(EzAction userAction) {
		if (confirmation){
			checkPos();
			assert(deleteAction != null);
			storage.deleteTask(deleteAction.getTargets());
			addHistory(deleteAction);
			if(!testing) {
				try {
					EzDataManage.saveToFile(storage);
				} catch (IOException e) {
					e.printStackTrace();
				}
				if(prevTab != null && !prevTab.equalsIgnoreCase("help")) {
					ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(prevTab);
					EzGUI.showContent(prevTab, list, EzGUI.getPage());
					EzGUI.highlightButton(prevTab);
				}
				else {
					EzGUI.refreshButton();
				}
			}
			userAction.setFeedback("Deleted successfully");
			deleteAction = null;
			confirmation = false;
		}
	}

	/** 
	 * This method abort the deletion if the user enter a N
	 * @param userAction
	 */
	private static void abortDelete(EzAction userAction) {
		if (confirmation){
			if(!testing) {
				if(prevTab != null && !prevTab.equalsIgnoreCase("help")) {
					ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(prevTab);
					EzGUI.showContent(prevTab, list, EzGUI.getPage());
					EzGUI.highlightButton(prevTab);
				}
				else {
					EzGUI.refreshButton();
				}
			}
			userAction.setFeedback("Action cancelled");
			deleteAction = null;
			confirmation = false;
		}
	}

	/**
	 * This method calls the corresponding sorting method according to user's input
	 * @param userAction
	 * @param currTab
	 */
	private static void sortTask(EzAction userAction, String currTab) {
		if(!confirmation) {
			switch(userAction.getTypeSort()) {
			case ID:
				EzGUI.showContent(currTab, EzSort.sortById(EzGUI.getTasksOnScreen()));
				break;

			case TITLE:
				EzGUI.showContent(currTab, EzSort.sortByTitle(EzGUI.getTasksOnScreen()));
				break;

			case VENUE:
				EzGUI.showContent(currTab, EzSort.sortByVenue(EzGUI.getTasksOnScreen()));
				break;

			case DATE:
				EzGUI.showContent(currTab, EzSort.sortByDate(EzGUI.getTasksOnScreen()));
				break;

			case PRIORITY:
				EzGUI.showContent(currTab, EzSort.sortByPriority(EzGUI.getTasksOnScreen()));
				break;

			case DONE:
				EzGUI.showContent(currTab, EzSort.sortByDone(EzGUI.getTasksOnScreen()));
				break;

			default:
				break;
			}
		}
	}

	/**
	 * This method allows navigation between multiple pages
	 * @param userAction
	 */
	private static void navigatePage(EzAction userAction) {
		if (!confirmation){
			setPageFeedback(userAction);
			EzGUI.showPage(userAction.getPageNumber());
		}
		else if(confirmation && deleteAction != null) {
			setPageFeedback(userAction);
			EzGUI.showPage(userAction.getPageNumber());
			return;
		}
	}

	private static void setPageFeedback(EzAction userAction) {
		if(EzGUI.getMaxPage() < userAction.getPageNumber()) {
			userAction.setFeedback("Page " + EzGUI.getMaxPage());
		}
		else if(userAction.getPageNumber() <= 0) {
			userAction.setFeedback("Page " + "1");
		}
		else {
			userAction.setFeedback("Page " + userAction.getPageNumber());
		}
	}
	
	/**
	 * This method checks the validity of undo action before calling the actual method
	 * @param userAction
	 */
	private static void undoAction(EzAction userAction) {
		if (!confirmation){
			if(pos <= -1) {
				userAction.setFeedback("Nothing to undo!");
				return;
			}
			else {
				undoTask();
				if(!testing) {
					try {
						EzDataManage.saveToFile(storage);
					} catch (IOException e) {
						e.printStackTrace();
					}
					String currTab = EzGUI.getCurrentTab();
					if(currTab != null && !currTab.equalsIgnoreCase("help")) {
						ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(currTab);
						EzGUI.showContent(currTab, list, EzGUI.getPage());
					}
					else {
						EzGUI.refreshButton();
					}
				}
			}
		}
	}

	/**
	 * This method checks the validity of redo action before calling the actual method
	 * @param userAction
	 */
	private static void redoAction(EzAction userAction) {
		if (!confirmation){
			if(pos >= history.size()-1) {
				userAction.setFeedback("Nothing to redo!");
				return;
			}
			else {
				redoTask();
				if(!testing) {
					try {
						EzDataManage.saveToFile(storage);
					} catch (IOException e) {
						e.printStackTrace();
					}
					String currTab = EzGUI.getCurrentTab();
					if(currTab != null && !currTab.equalsIgnoreCase("help")) {
						ArrayList<EzTask> list = EzGUI.getTaskListOfTheTab(currTab);
						EzGUI.showContent(currTab, list, EzGUI.getPage());
					}
					else {
						EzGUI.refreshButton();
					}
				}
			}
		}
	}

	/**
	 * This method calls the GUI to display the list of tasks
	 * @param userAction
	 */
	private static void showTask(EzAction userAction) {
		if (!confirmation){
			ArrayList<EzTask> toBeShown = userAction.getTargets();
			EzGUI.highlightButton("All");
			EzGUI.showContent("Result", toBeShown);
		}
	}

	/*
	 * This method calls the corresponding method to remove the previous action of the user
	 */
	private static void undoTask() {
		switch(history.get(pos).getAction()) {
		case ADD:
			storage.deleteTask(history.get(pos--).getResults());
			break;

		case DELETE:
			ArrayList<EzTask> deletedData = history.get(pos--).getTargets();
			for(int i = 0; i < deletedData.size(); i++) {
				storage.addTask(deletedData.get(i));
			}
			break;

		case UPDATE:
			storage.updateTask(history.get(pos--).getTargets());
			break;

		case DONE:
			storage.updateTask(history.get(pos--).getTargets());
			break;

		case UNDONE:
			storage.updateTask(history.get(pos--).getTargets());
			break;

		case REMOVE:
			storage.updateTask(history.get(pos--).getTargets());
			break;

		default:
			break;
		}
	}

	/*
	 * This method calls the corresponding method to perform the previous undo'ed action 
	 */
	private static void redoTask() {
		switch(history.get(++pos).getAction()) {
		case ADD:
			EzTask reTask = history.get(pos).getResults().get(0);
			storage.addTask(reTask);
			break;

		case DELETE:
			ArrayList<EzTask> delete = history.get(pos).getTargets();
			storage.deleteTask(delete);
			break;

		case UPDATE:
			storage.updateTask(history.get(pos).getResults());
			break;

		case DONE:
			storage.updateTask(history.get(pos).getResults());
			break;

		case UNDONE:
			storage.updateTask(history.get(pos).getResults());
			break;

		case REMOVE:
			storage.updateTask(history.get(pos).getResults());
			break;

		default:
			break;
		}
	}

	/**
	 * This method adds user actions to a list of history for undo and redo operations
	 * @param userAction
	 */
	private static void addHistory(EzAction userAction) {
		if(history.size() == MAX_SIZE) {
			history.remove(0);
		}
		history.add(userAction);
		pos = history.size()-1;
	}

	/*
	 * This method ensures the latest version of history by checking the pointer on the history list
	 */
	private static void checkPos() {
		int sizeOfHistory = history.size();
		if(pos < sizeOfHistory-1) {
			for(int i = --sizeOfHistory; i > pos; i--) {
				history.remove(i);
			}
		}
	}

	public static void loadFromFile() throws IOException {
		EzDataManage.loadFromFile(storage);
	}

	public static EzStorage getStorage() {
		return storage;
	}

	/**
	 * This method sets the controller in testing mode to disable feedback function
	 * @param onTest
	 */
	public static void setTesting(boolean onTest) {
		testing = onTest;
	}

	public static ArrayList<EzAction> getHistory() {
		return history;
	}
}
	// End of segment: C:\Users\Galaxy\Documents\CS2103T\src\EzController.java





	/**
	 * origin: C:\Users\Galaxy\Documents\CS2103T\src\EzControllerTest.java
	 */

public class EzControllerTest {
	@Test
	public void testController() {
		
		ArrayList<EzAction> history;
		String tempCommand;
		
		EzGUI gui = new EzGUI(true);
		EzController.setTesting(true);
		// history index 0
		EzController.execute("Add \"do automated testing\"");
		// history index 1
		EzController.execute("Add \"attend CS2103T tutorial\" at 9am at \"COM 2\" tomorrow");
		// history index 2
		EzController.execute("Add \"task 1\"");
		// history index 3
		EzController.execute("Add \"task 2\"");
		// history index 4
		EzController.execute("delete from 3 to 4");
		EzController.execute("Y");
		// history index 5
		EzController.execute("update 2 venue \"COM 1\"");
		// history index 6
		EzController.execute("done 2");
		// history index 7
		EzController.execute("undone 2");
		// history index 8
		EzController.execute("remove venue 2");
		
		history = EzController.getHistory();
		
		// check the size of history
		assertEquals(9, history.size());
	
		// check history index 0
		assertEquals(TypeOfAction.ADD, history.get(0).getAction());
		assertEquals("do automated testing", history.get(0).getResults().get(0).getTitle());
		
		// check history index 1
		assertEquals(TypeOfAction.ADD, history.get(1).getAction());
		assertEquals("attend CS2103T tutorial", history.get(1).getResults().get(0).getTitle());
		assertEquals("COM 2", history.get(1).getResults().get(0).getVenue());
		assertEquals(9, history.get(1).getResults().get(0).getEndTime().get(Calendar.HOUR_OF_DAY));
		assertEquals(0, history.get(1).getResults().get(0).getEndTime().get(Calendar.MINUTE));
		
		// check history index 2
		assertEquals(TypeOfAction.ADD, history.get(2).getAction());
		assertEquals("task 1", history.get(2).getResults().get(0).getTitle());
		
		// check history index 3
		assertEquals(TypeOfAction.ADD, history.get(3).getAction());
		assertEquals("task 2", history.get(3).getResults().get(0).getTitle());
		
		// check history index 4
		assertEquals(TypeOfAction.DELETE, history.get(4).getAction());
		assertTrue(history.get(4).getResults() == null);
		assertEquals(2, history.get(4).getTargets().size());
		assertEquals("task 1", history.get(4).getTargets().get(0).getTitle());
		assertEquals("task 2", history.get(4).getTargets().get(1).getTitle());
		
		// check history index 5
		assertFalse(TypeOfAction.Y == history.get(5).getAction());
		assertEquals(TypeOfAction.UPDATE, history.get(5).getAction());
		assertEquals(1, history.get(5).getTargets().size());
		assertEquals(1, history.get(5).getResults().size());
		assertEquals("COM 1", history.get(5).getResults().get(0).getVenue());
		assertEquals("COM 2", history.get(5).getTargets().get(0).getVenue());
		
		// check history index 6
		assertEquals(TypeOfAction.DONE, history.get(6).getAction());
		assertTrue(history.get(6).getResults() != null);
		assertTrue(history.get(6).getTargets() != null);
		
		// check history index 7
		assertEquals(TypeOfAction.UNDONE, history.get(7).getAction());
		assertTrue(history.get(7).getResults() != null);
		assertTrue(history.get(7).getTargets() != null);
		
		// check history index 8
		assertEquals(TypeOfAction.REMOVE, history.get(8).getAction());
		assertTrue(history.get(8).getTargets().get(0).getVenue().equals("COM 1"));
		assertTrue(history.get(8).getResults().get(0).getVenue().equals(""));
		
		// history index 9 to index 20
		// a total of 9  (index 0 to 8) tasks added previously
		// a total of 12 (index 9 to 20) tasks added here
		// history exceeds 20, the first action in history will be removed
		for(int i = 0; i <= 11; i++) { 
			tempCommand = "add \"task " + i + "\"";
			EzController.execute(tempCommand);
		}

		// check history index 0 again after size of history exceeds 20
		// should be equals to previous index 1 action
		assertEquals(TypeOfAction.ADD, history.get(0).getAction());
		assertEquals("attend CS2103T tutorial", history.get(0).getResults().get(0).getTitle());
		assertEquals("COM 2", history.get(0).getResults().get(0).getVenue());
		assertEquals(9, history.get(0).getResults().get(0).getEndTime().get(Calendar.HOUR_OF_DAY));
		assertEquals(0, history.get(0).getResults().get(0).getEndTime().get(Calendar.MINUTE));
	}
}

	// End of segment: C:\Users\Galaxy\Documents\CS2103T\src\EzControllerTest.java





	/**
	 * origin: C:\Users\Galaxy\Documents\CS2103T\src\EzDataManage.java
	 */


public class EzDataManage {
	
	private static final String EXTERNAL_FILENAME = "external.ezt";
	
	private static final int TASKS_LIST_BYTES = 4;
	private static final int TYPE_OF_TASK_BYTES = 1;
	private static final int NUM_OF_ATTRIBUTES_BYTES = 1;
	
	/*
	 * Time bytes constants
	 */
	private static final int YEAR_BYTES = 2;
	private static final int MONTH_BYTES = 1;
	private static final int DAY_OF_MONTH_BYTES = 1;
	private static final int HOUR_OF_DAY_BYTES = 1;
	private static final int MINUTES_BYTES = 1;
	
	/*
	 * Task attributes bytes constants
	 */
	private static final int INDEX_BYTES = 1;
	private static final int ID_BYTES = 4;
	private static final int TITLE_BYTES = 2;
	private static final int VENUE_BYTES = 2;
	private static final int PRIORITY_BYTES = 1;
	private static final int STATUS_BYTES = 1;
	
	/*
	 * Number of attributes of tasks with different type of time
	 */
	private static final int FLOATING_NUM_OF_ATTRIBUTES = 5;
	private static final int DEADLINE_NUM_OF_ATTRIBUTES = 6;
	private static final int TIMED_NUM_OF_ATTRIBUTES = 7;
	
	/*
	 * Type of task indices
	 */
	private static final int FLOATING_TYPE_OF_TASK = 0;
	private static final int DEADLINE_TYPE_OF_TASK = 1;
	private static final int TIMED_TYPE_OF_TASK = 2;
	
	/*
	 * Indices
	 */
	private static final int ID_INDEX = 0;
	private static final int TITLE_INDEX = 1;
	private static final int VENUE_INDEX = 2;
	private static final int START_TIME_INDEX = 3;
	private static final int END_TIME_INDEX = 4;
	private static final int PRIORITY_INDEX = 5;
	private static final int STATUS_INDEX = 6;
	private static final int DONE_INDEX = 1;
	private static final int UNDONE_INDEX = 0;

	/**
	 * This method writes tasks stored in storage into the external file
	 * @param storage
	 * @throws IOException
	 */
	public static void saveToFile(EzStorage storage) throws IOException {
		EzBinaryWriter writer = new EzBinaryWriter(EXTERNAL_FILENAME);
		
		ArrayList<EzTask> tempStorage = EzSort.sortByPriority(storage.getListOfAllTasks());
		writer.write(tempStorage.size(), TASKS_LIST_BYTES);
		for(int i = 0; i < tempStorage.size(); i++) {
			int typeOfTask;
			int numAttribute;
			EzTask task = tempStorage.get(i);
			if(task.getStartTime() != tempStorage.get(i).getEndTime()) {
				typeOfTask = TIMED_TYPE_OF_TASK;
			}
			else {
				if(task.getStartTime() == null) {
					typeOfTask = FLOATING_TYPE_OF_TASK;
				}
				else {
					typeOfTask = DEADLINE_TYPE_OF_TASK;
				}
			}
			writer.write(typeOfTask, TYPE_OF_TASK_BYTES);
			switch(typeOfTask) {
			case FLOATING_TYPE_OF_TASK:
				numAttribute = FLOATING_NUM_OF_ATTRIBUTES;
				break;
			case DEADLINE_TYPE_OF_TASK:
				numAttribute = DEADLINE_NUM_OF_ATTRIBUTES;
				break;
			default:
				numAttribute = TIMED_NUM_OF_ATTRIBUTES;
				break;
			}
			writer.write(numAttribute, NUM_OF_ATTRIBUTES_BYTES);
			
			// id
			writer.write(ID_INDEX, INDEX_BYTES); 
			writer.write(task.getId(), ID_BYTES);
			
			// title
			writer.write(TITLE_INDEX, INDEX_BYTES); 
			writer.write(task.getTitle().length(), TITLE_BYTES);
			writer.writeString(task.getTitle());
			
			// venue
			writer.write(VENUE_INDEX, INDEX_BYTES);
			int lenVenue;
			if(task.getVenue() == null) {
				lenVenue = 0;
			}
			else {
				lenVenue = task.getVenue().length();
			}
			writer.write(lenVenue, VENUE_BYTES);
			writer.writeString(task.getVenue());
			
			// priority
			writer.write(PRIORITY_INDEX, INDEX_BYTES);
			writer.write(task.getPriority(), PRIORITY_BYTES);
			
			// done
			writer.write(STATUS_INDEX, INDEX_BYTES);
			int status;
			if(task.isDone()) {
				status = DONE_INDEX;
			}
			else {
				status = UNDONE_INDEX;
			}
			writer.write(status, STATUS_BYTES);
			
			// time
			if(typeOfTask != FLOATING_TYPE_OF_TASK) {
				writer.write(START_TIME_INDEX, INDEX_BYTES);
				writer.write(task.getStartTime().get(Calendar.YEAR), YEAR_BYTES);
				writer.write(task.getStartTime().get(Calendar.MONTH), MONTH_BYTES);
				writer.write(task.getStartTime().get(Calendar.DAY_OF_MONTH), DAY_OF_MONTH_BYTES);
				writer.write(task.getStartTime().get(Calendar.HOUR_OF_DAY), HOUR_OF_DAY_BYTES);
				writer.write(task.getStartTime().get(Calendar.MINUTE), MINUTES_BYTES);
				
				if(typeOfTask == TIMED_TYPE_OF_TASK) {
					writer.write(END_TIME_INDEX, INDEX_BYTES);
					writer.write(task.getEndTime().get(Calendar.YEAR), YEAR_BYTES);
					writer.write(task.getEndTime().get(Calendar.MONTH), MONTH_BYTES);
					writer.write(task.getEndTime().get(Calendar.DAY_OF_MONTH), DAY_OF_MONTH_BYTES);
					writer.write(task.getEndTime().get(Calendar.HOUR_OF_DAY), HOUR_OF_DAY_BYTES);
					writer.write(task.getEndTime().get(Calendar.MINUTE), MINUTES_BYTES);
				}
			}
		}
		writer.close();
	}
	
	/**
	 * This method reads the data from the external file once the program starts up
	 * @param storage
	 * @throws IOException
	 */
	public static void loadFromFile(EzStorage storage) throws IOException {
		try{
			EzBinaryReader rd = new EzBinaryReader(EXTERNAL_FILENAME);
			if (rd.available() > 0){
				int numTask = rd.read(TASKS_LIST_BYTES);
				for (int i = 0; i < numTask; i++){
					int typeOfTask = rd.read(TYPE_OF_TASK_BYTES);
					int numAttribute = rd.read(NUM_OF_ATTRIBUTES_BYTES);
					EzTask temp = new EzTask();
					for(int j = 0; j < numAttribute; j++) {
						int typeAtt = rd.read(INDEX_BYTES);
						switch(typeAtt) {
						case 0:
							temp.setId(rd.read(ID_BYTES));
							break;
						case 1:
							int sizeOfTitle = rd.read(TITLE_BYTES);
							temp.setTitle(rd.readString(sizeOfTitle));
							break;
						case 2:
							int sizeOfVenue = rd.read(VENUE_BYTES);
							temp.setVenue(rd.readString(sizeOfVenue));
							break;
						case 3:
							temp.setStartTime(rd.read(YEAR_BYTES), rd.read(MONTH_BYTES), rd.read(DAY_OF_MONTH_BYTES), rd.read(HOUR_OF_DAY_BYTES), rd.read(MINUTES_BYTES));
							break;
						case 4:
							temp.setEndTime(rd.read(YEAR_BYTES), rd.read(MONTH_BYTES), rd.read(DAY_OF_MONTH_BYTES), rd.read(HOUR_OF_DAY_BYTES), rd.read(MINUTES_BYTES));
							break;
						case 5:
							temp.setPriority(rd.read(PRIORITY_BYTES));
							break;
						default:
							temp.setDone(rd.read(STATUS_BYTES) == DONE_INDEX);
							break;
						}
						if (typeOfTask == DEADLINE_TYPE_OF_TASK) {
							temp.setEndTimeAsStartTime();
						}
					}
					storage.addTask(temp);
				}
				ArrayList<EzTask> loadedList = storage.getListOfAllTasks();
				EzGUI.showContent("Loaded from file", EzSort.sortById(loadedList));
				rd.close();
			}
		} 
		catch (IOException e)
		{
			EzBinaryWriter write = new EzBinaryWriter(EXTERNAL_FILENAME);
		}
		
	}
}

	// End of segment: C:\Users\Galaxy\Documents\CS2103T\src\EzDataManage.java





