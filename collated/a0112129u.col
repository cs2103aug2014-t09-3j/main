//@author: a0112129u



	/**
	 * origin: E:\Java Projects\CS2103T\src\EzAction.java
	 */

/**
 * the EzAction Object is only used to store the information of action, which
 * have been done. targets is the list of tasks before doing the action results
 * is the list of task after the action
 * 
 * for ADD action, targets is NULL and results is an 1-element array of task.
 * for UPDATE action, targets and results are the list of task before and after
 * doing the action respectively. for DELETE action, targets is the list of
 * tasks that will be delete while results is NULL. for DONE, UNDONE and REMOVE
 * action, they are the same as UPDATE.
 * 
 */

public class EzAction {

	private TypeOfAction action;
	private ArrayList<EzTask> targets;
	private ArrayList<EzTask> results;
	private String feedback;
	private TypeOfSort typeSort;
	private int pageNumber;

	/**
	 * @return the type of the action
	 */
	public TypeOfAction getAction() {
		return action;
	}

	/**
	 * set the type of the action
	 * 
	 * @param action
	 *            is the type of the action
	 */
	public void setAction(TypeOfAction action) {
		this.action = action;
	}

	/**
	 * @return the target of the action
	 */
	public ArrayList<EzTask> getTargets() {
		return targets;
	}

	/**
	 * set the target tasks of the action
	 * 
	 * @param targets
	 *            is the list of the target tasks
	 */
	public void setTargets(ArrayList<EzTask> targets) {
		this.targets = targets;
	}

	/**
	 * @return the result tasks of the action
	 */
	public ArrayList<EzTask> getResults() {
		return results;
	}

	/**
	 * set the result tasks of the action
	 * 
	 * @param results
	 *            is the list of the result tasks
	 */
	public void setResults(ArrayList<EzTask> results) {
		this.results = results;
	}

	/**
	 * @return the feedback of the action
	 */
	public String getFeedback() {
		return feedback;
	}

	/**
	 * set feedback of the action
	 * 
	 * @param feedback
	 */
	public void setFeedback(String feedback) {
		this.feedback = feedback;
	}

	/**
	 * @return the type of sorting for SORT action
	 */
	public TypeOfSort getTypeSort() {
		return typeSort;
	}

	/**
	 * set the type of sorting for SORT action
	 * 
	 * @param typeSort
	 */
	public void setTypeSort(TypeOfSort typeSort) {
		this.typeSort = typeSort;
	}

	/**
	 * @return the page number for PAGE action
	 */
	public int getPageNumber() {
		return pageNumber;
	}

	/**
	 * set the page number for PAGE action
	 * 
	 * @param pageNumber
	 */
	public void setPageNumber(int pageNumber) {
		this.pageNumber = pageNumber;
	}

}

	// End of segment: E:\Java Projects\CS2103T\src\EzAction.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzAppDelegate.java
	 */


/**
 * this class contains the main function. It will call the initialization of the
 * GUI
 * 
 */
public class EzAppDelegate {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		initiateGUI();
	}

	/**
	 * initiate the GUI
	 */
	public static void initiateGUI() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					EzGUI frame = new EzGUI();
					frame.setVisible(true);
					frame.showReminder();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzAppDelegate.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzBinaryReader.java
	 */

public class EzBinaryReader extends FileInputStream {

	/**
	 * this function will create a reader by a file name
	 * 
	 * @param arg0
	 *            is the file name to be read from
	 * @throws FileNotFoundException
	 */
	public EzBinaryReader(String arg0) throws FileNotFoundException {
		super(arg0);
	}

	/**
	 * read @param numBytes bytes and convert them into an integer
	 * 
	 * @param numBytes
	 * @return an integer
	 * @throws IOException
	 */
	public int read(int numBytes) throws IOException {
		int result = 0;
		for (int i = 0; i < numBytes; i++) {
			try {
				result = (result << 8) + read();
			} catch (IOException e) {
				throw e;
			}
		}
		return result;
	}

	/**
	 * this function will read a string from the file
	 * 
	 * @param length
	 *            is the length of the string to be read
	 * @return a string
	 * @throws IOException
	 */
	public String readString(int length) throws IOException {
		String result = "";
		for (int i = 0; i < length; i++) {
			try {
				result = result + (char) read();
			} catch (IOException e) {
				throw e;
			}
		}
		return result;
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzBinaryReader.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzBinaryWriter.java
	 */

public class EzBinaryWriter extends FileOutputStream {

	/**
	 * this function will create a writer by a file name
	 * 
	 * @param arg0
	 *            is the file name
	 * @throws FileNotFoundException
	 */
	public EzBinaryWriter(String arg0) throws FileNotFoundException {
		super(arg0);
	}

	/**
	 * write the @param data into @param numBytes bytes
	 * 
	 * @param data
	 * @param numBytes
	 * @throws IOException
	 */
	public void write(int data, int numBytes) throws IOException {
		if (numBytes == 1) {
			write(data % 256);
		} else {
			write(data >> 8, numBytes - 1);
			write(data % 256);
		}
	}

	/**
	 * this function will write a string into the file
	 * 
	 * @param data
	 * @throws IOException
	 */
	public void writeString(String data) throws IOException {
		if (data != null) {
			for (int i = 0; i < data.length(); i++) {
				write(data.charAt(i));
			}
		}
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzBinaryWriter.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzConstants.java
	 */


/**
 * this class contains all constants that are used by some classes
 * 
 */
public class EzConstants {
	public static final Color FERN_COLOR = new Color(97, 189, 109);
	public static final Color CHATEAU_GREEN_COLOR = new Color(65, 168, 95);

	public static final Color MOUNTAIN_MEADOW_COLOR = new Color(26, 188, 156);
	public static final Color PERSIAN_GREEN_COLOR = new Color(0, 168, 133);

	public static final Color PICTION_BLUE_COLOR = new Color(84, 172, 210);
	public static final Color CURIOUS_BLUE_COLOR = new Color(61, 142, 185);

	public static final Color MARINER_COLOR = new Color(44, 130, 201);
	public static final Color DENIM_COLOR = new Color(41, 105, 176);

	public static final Color WISTERIA_COLOR = new Color(147, 101, 184);
	public static final Color BLUE_GEM_COLOR = new Color(85, 57, 130);

	public static final Color CHAMBRAY_COLOR = new Color(71, 85, 119);
	public static final Color BLUE_WHALE_COLOR = new Color(40, 50, 78);

	public static final Color ENERGY_COLOR = new Color(247, 218, 100);
	public static final Color TURBO_COLOR = new Color(250, 197, 28);

	public static final Color NEON_CARROT_COLOR = new Color(251, 160, 38);
	public static final Color SUN_COLOR = new Color(243, 121, 52);

	public static final Color TERRA_COTTA_COLOR = new Color(235, 107, 86);
	public static final Color VALENCIA_COLOR = new Color(209, 72, 65);

	public static final Color CINNABAR_COLOR = new Color(225, 73, 56);
	public static final Color WELL_READ_COLOR = new Color(184, 49, 47);

	public static final Color ALMOND_FROST_COLOR = new Color(163, 143, 132);
	public static final Color IRON_GRAY_COLOR = new Color(117, 112, 107);

	public static final Color WHITE_SMOKE_COLOR = new Color(239, 239, 239);
	public static final Color IRON_COLOR = new Color(209, 213, 216);

	public static final Color SHOW_AREA_BACKGROUND = EzConstants.WHITE_SMOKE_COLOR;

	public static final int MAXIMUM_PRIORITY = 3;
}

	// End of segment: E:\Java Projects\CS2103T\src\EzConstants.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzGUI.java
	 */


/**
 * this class is the GUI of the program
 */
public class EzGUI extends JFrame {

	private static final String ICON_FILENAME = "/icon.png";
	public static final String ALL = EzGUIButtonPanel.getInstance().ALL;
	public static final String DONE = EzGUIButtonPanel.getInstance().DONE;
	public static final String NOT_DONE = EzGUIButtonPanel.getInstance().NOT_DONE;
	public static final String TODAY = EzGUIButtonPanel.getInstance().TODAY;
	public static final String TOMORROW = EzGUIButtonPanel.getInstance().TOMORROW;
	public static final String UPCOMING = EzGUIButtonPanel.getInstance().UPCOMING;
	public static final String OVERDUE = EzGUIButtonPanel.getInstance().OVERDUE;
	public static final String NO_DATE = EzGUIButtonPanel.getInstance().NO_DATE;
	public static final String HELP = EzGUIButtonPanel.getInstance().HELP;

	private static final String HELP_DOCUMENT_FILE_NAME = "help.txt";

	private final static Logger LOGGER = Logger
			.getLogger(EzGUI.class.getName());

	private static final String PROGRAM_TITLE = "EzTask";

	public static final String BUTTON_FONT = "Arial";

	public static final Color BACKGROUND_COLOR = EzConstants.CHATEAU_GREEN_COLOR;
	private static final int APP_HEIGHT = 640;
	private static final int APP_WIDTH = 960;
	private static final int START_LOCATION_Y = 0;
	private static final int START_LOCATION_X = 50;

	private static final int TASK_PER_PAGE = 8;

	private static final String[] KEYWORDS = { "add", "delete", "update",
			"show", "done", "undone", "undo", "redo", "on", "at", "from", "to",
			"today", "tomorrow", "page", "title", "date", "time", "start",
			"end", "venue", "priority", "all", "have", "help", "y", "n",
			"remove", "id", "sort" };

	private static JFrame mainFrame;
	private JPanel mainPanel;
	private static EzGUIDisplayPanel displayPanel;
	private static JEditorPane displayArea;

	private static EzGUISuggestPanel suggestPanel;
	private static ArrayList<EzTask> onScreenTasks;
	private static int pageToShow;
	private static String headerToShow;
	private static EzGUIButtonPanel buttonPanel;

	/**
	 * initiate the GUI, it will read the available data file
	 */
	public EzGUI() {
		initMainFrame();
		createMainPanel();
		createDisplayPanel();
		createCommandPanel();
		createButtonPanel();
		registerFont();
		loadFile();
		setDefaultButton("Today");
		createSuggestPanel();
		setIcon();
	}

	/**
	 * initiate the GUI with a choice to have a new file or not
	 */
	public EzGUI(boolean newFile) {
		initMainFrame();
		createMainPanel();
		createDisplayPanel();
		createCommandPanel();
		createButtonPanel();
		registerFont();
		if (!newFile) {
			loadFile();
		}
		setDefaultButton("Today");
		createSuggestPanel();
		setIcon();
	}

	/**
	 * assigned values to the main frame
	 */
	private void initMainFrame() {
		mainFrame = this;
		setTitle(PROGRAM_TITLE);
		setResizable(true);
		setMinimumSize(new Dimension(APP_WIDTH, APP_HEIGHT));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(START_LOCATION_X, START_LOCATION_Y, APP_WIDTH, APP_HEIGHT);
	}

	/**
	 * return the main frame;
	 */
	public static JFrame getMainFrame() {
		return mainFrame;
	}

	/**
	 * return the window's location
	 */
	public static Point getMainFrameLocation() {
		return mainFrame.getLocation();
	}

	/**
	 * set the location of the window
	 */
	public static void setMainFrameLocation(int x, int y) {
		mainFrame.setLocation(x, y);
	}

	/**
	 * Create main panel
	 */
	private void createMainPanel() {
		mainPanel = new EzGUIMainPanel();
		setContentPane(mainPanel);
		LOGGER.log(Level.INFO, "Created Main Panel");
	}

	/**
	 * create show panel
	 */
	private void createDisplayPanel() {
		displayArea = new JEditorPane();
		displayPanel = new EzGUIDisplayPanel(displayArea);
		mainPanel.add(displayPanel, BorderLayout.CENTER);
		LOGGER.log(Level.INFO, "Created Display Panel");
	}

	/**
	 * create command panel
	 */
	private void createCommandPanel() {
		EzGUICommandPanel commandPanel = EzGUICommandPanel.getInstance();
		mainPanel.add(commandPanel, BorderLayout.SOUTH);
	}

	/**
	 * create button panel
	 */
	private void createButtonPanel() {
		buttonPanel = EzGUIButtonPanel.getInstance();
		mainPanel.add(buttonPanel, BorderLayout.WEST);
		LOGGER.log(Level.INFO, "Created Button Panel");
	}

	/**
	 * add the font to the program
	 */
	private static void registerFont() {
		try {
			Font font = Font.createFont(Font.TRUETYPE_FONT,
					new File("fonts/Digital Dismay.otf")).deriveFont(16f);
			GraphicsEnvironment genv = GraphicsEnvironment
					.getLocalGraphicsEnvironment();
			genv.registerFont(font);
			LOGGER.log(Level.INFO,
					"Registered Font Digital Dismay Successfully");
		} catch (Exception e) {
			LOGGER.log(Level.WARNING, "Font Digital Dismay Not Found");
		}

		try {
			Font font = Font.createFont(Font.TRUETYPE_FONT,
					new File("fonts/ARLRDBD.TTF")).deriveFont(16f);
			GraphicsEnvironment genv = GraphicsEnvironment
					.getLocalGraphicsEnvironment();
			genv.registerFont(font);
			LOGGER.log(Level.INFO, "Registered Font ARLRDBD Successfully");
		} catch (Exception e) {
			LOGGER.log(Level.WARNING, "Font ARLRDBD Not Found");
		}

	}

	/**
	 * load the external file
	 */
	private void loadFile() {
		try {
			EzController.loadFromFile();
			LOGGER.log(Level.INFO, "Loaded file successfully");
		} catch (IOException e) {
			LOGGER.log(Level.WARNING, "Data file not found");
			e.printStackTrace();
		}
	}

	/**
	 * press the button
	 * 
	 * @param buttonName
	 *            is the name of the button
	 */
	private void setDefaultButton(String buttonName) {
		buttonPanel.pressButton(buttonName);
	}

	/**
	 * set the icon for the program
	 */
	private void setIcon() {
		this.setIconImage(Toolkit.getDefaultToolkit().getImage(
				EzGUI.class.getResource(ICON_FILENAME)));
	}

	/**
	 * create suggest panel
	 */
	private void createSuggestPanel() {
		suggestPanel = EzGUISuggestPanel.getInstance();

		addComponentListener(new ComponentAdapter() {
			@Override
			public void componentMoved(ComponentEvent arg0) {
				JFrame frame = (JFrame) arg0.getSource();

				int x = frame.getLocation().x
						+ EzGUISuggestPanel.SUGGEST_PANEL_X_RELATIVE_POS;
				int y = frame.getLocation().y + frame.getHeight()
						- EzGUISuggestPanel.SUGGEST_PANEL_Y_RELATIVE_POS;
				suggestPanel.setLocation(x, y);
			}

			@Override
			public void componentResized(ComponentEvent arg0) {
				JFrame frame = (JFrame) arg0.getSource();

				int x = frame.getLocation().x
						+ EzGUISuggestPanel.SUGGEST_PANEL_X_RELATIVE_POS;
				int y = frame.getLocation().y + frame.getHeight()
						- EzGUISuggestPanel.SUGGEST_PANEL_Y_RELATIVE_POS;
				suggestPanel.setPreferredSize(new Dimension(frame.getWidth()
						- (APP_WIDTH - EzGUISuggestPanel.ORIGINAL_WIDTH),
						EzGUISuggestPanel.ORIGINAL_HEIGHT));
				suggestPanel.setLocation(x, y);
				suggestPanel.loadSuggestion(EzGUICommandPanel.getInstance()
						.getText());
			}
		});
	}

	/**
	 * show the reminder if you have tasks to be done on today
	 */
	public void showReminder() {
		GregorianCalendar today = new GregorianCalendar();
		ArrayList<EzTask> list = EzController.getStorage().getTasksByDate(
				today.getTime());
		int numTasksTodayToDo = 0;
		for (int i = 0; i < list.size(); i++) {
			if (!list.get(i).isDone()) {
				numTasksTodayToDo++;
			}
		}

		if (numTasksTodayToDo > 0) {
			JOptionPane.showMessageDialog(this, "You have " + numTasksTodayToDo
					+ " task(s) that need to be done today");
		}
	}

	/**
	 * scroll the main display up
	 */
	public static void scrollUp() {
		displayPanel.scrollUp();
	}

	/**
	 * scroll the main display down
	 */
	public static void scrollDown() {
		displayPanel.scrollDown();
	}

	/**
	 * read the content of the help file
	 * 
	 * @return the content of the help file in HTML format
	 */
	private static String readHelpDocument() {
		File file = new File(HELP_DOCUMENT_FILE_NAME);
		assert (file != null);
		BufferedReader in;
		String text = "";
		try {
			String line;
			in = new BufferedReader(new InputStreamReader(file.toURI().toURL()
					.openStream()));
			while ((line = in.readLine()) != null) {
				text += line;
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return text;
	}

	/**
	 * change the window's size
	 * 
	 * @param x
	 *            is the increment of the width
	 * @param y
	 *            is the increment of the height
	 */
	public static void increaseWindowSize(int x, int y) {
		int width = mainFrame.getWidth();
		int height = mainFrame.getHeight();
		mainFrame.setSize(width + x, height + y);
	}

	/**
	 * show the help page
	 */
	public static void showHelp() {
		String text = readHelpDocument();
		onScreenTasks = null;
		showContent("Help - All commands", text);
	}

	/**
	 * get the tasks are shown on the screen
	 * 
	 * @return the tasks are shown on the screen
	 */
	public static ArrayList<EzTask> getTasksOnScreen() {
		return onScreenTasks;
	}

	/**
	 * get the current page
	 * 
	 * @return the current page
	 */
	public static int getPage() {
		return pageToShow;
	}

	/**
	 * get the header
	 * 
	 * @return the header
	 */
	public static String getHeader() {
		return headerToShow;
	}

	/**
	 * show the list of task with the header. Showing the first page is default.
	 * 
	 * @param header
	 * @param listOfTasks
	 */
	public static void showContent(String header, ArrayList<EzTask> listOfTasks) {
		showContent(header, listOfTasks, 1);
	}

	/**
	 * show the list of task with the header. Showing the page the contains the
	 * task
	 * 
	 * @param header
	 * @param listOfTasks
	 * @param task
	 */
	public static void showContent(String header,
			ArrayList<EzTask> listOfTasks, EzTask task) {
		assert (listOfTasks != null);
		onScreenTasks = listOfTasks;
		headerToShow = new String(header);

		showPage(findPage(task));
		EzGUIButtonPanel.getInstance().refreshButton();
	}

	/**
	 * show the list of task with the header.
	 * 
	 * @param header
	 * @param listOfTasks
	 * @param page
	 */
	public static void showContent(String header,
			ArrayList<EzTask> listOfTasks, int page) {
		assert (listOfTasks != null);
		onScreenTasks = listOfTasks;
		headerToShow = new String(header);

		showPage(page);
		EzGUIButtonPanel.getInstance().refreshButton();
	}

	/**
	 * find the page that contains the task
	 */
	public static int findPage(EzTask task) {
		int id = -1;
		if (onScreenTasks != null) {
			for (int i = 0; i < onScreenTasks.size(); i++) {
				if (task.getId() == onScreenTasks.get(i).getId()) {
					id = i;
				}
			}
		}
		if (id != -1) {
			return id / TASK_PER_PAGE + 1;
		} else {
			return -1;
		}
	}

	/**
	 * get the maximum page
	 * 
	 * @return
	 */
	public static int getMaxPage() {
		if (onScreenTasks != null) {
			int pageMaximum = onScreenTasks.size() / TASK_PER_PAGE;
			if (onScreenTasks.size() % TASK_PER_PAGE > 0) {
				pageMaximum++;
			}

			if (pageMaximum < 1) {
				pageMaximum = 1;
			}
			return pageMaximum;
		} else {
			return 1;
		}
	}

	/**
	 * show the page according to the numPage
	 * 
	 * @param numPage
	 */
	public static void showPage(int numPage) {
		if (onScreenTasks != null) {
			int pageMaximum = getMaxPage();

			if (numPage < 1) {
				numPage = 1;
			} else if (numPage > pageMaximum) {
				numPage = pageMaximum;
			}

			pageToShow = numPage;

			ArrayList<String> list = new ArrayList<String>();
			for (int i = (numPage - 1) * TASK_PER_PAGE; i < Math.min(numPage
					* TASK_PER_PAGE, onScreenTasks.size()); i++) {
				list.add(EzHtmlGenerator.createHtmlEzTask(onScreenTasks.get(i)));
			}

			String content = EzHtmlGenerator
					.center(EzHtmlGenerator.createHtmlTable(list.size(), 1,
							list,
							"border=0 cellspacing=4 cellpadding=1 width=\"100%\""));
			showContent(
					headerToShow + " (" + numPage + "/" + pageMaximum + ")",
					content);
		}
	}

	/**
	 * get the page that is being shown
	 * 
	 * @return
	 */
	public static int getPageToShow() {
		return pageToShow;
	}

	/**
	 * show the content with a header
	 * 
	 * @param header
	 * @param content
	 */
	private static void showContent(String header, String content) {
		String text = EzHtmlGenerator.createHtmlTableWithHeader(header,
				content, "border=0 cellspacing=0 cellpadding=0 width=\"100%\"");
		displayArea.setText(text);
		displayArea.setCaretPosition(0);

		EzGUIButtonPanel.getInstance().refreshButton();
	}

	/**
	 * @return the date of today
	 */
	public static Date getToday() {
		Calendar cal = Calendar.getInstance();
		return cal.getTime();
	}

	/**
	 * @return the date of tomorrow
	 */
	public static Date getTomorrow() {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, 1);
		return cal.getTime();
	}

	/**
	 * check if @param word is the keyword or not
	 * 
	 * @param word
	 * @return
	 */
	public static boolean isKeyword(String word) {
		for (int i = 0; i < KEYWORDS.length; i++) {
			if (KEYWORDS[i].equalsIgnoreCase(word)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * highlight a button by its name
	 * 
	 * @param name
	 *            is the name of the button
	 */
	public static void highlightButton(String name) {
		EzGUIButtonPanel.getInstance().highlightButton(name);
	}

	/**
	 * make all buttons unhighlighted
	 */
	public static void unhighlightButton() {
		EzGUIButtonPanel.getInstance().unhighlightButton();
	}

	/**
	 * @return the name of the current selected tab
	 */
	public static String getCurrentTab() {
		return EzGUIButtonPanel.getInstance().getCurrentTab();
	}

	/**
	 * @param name
	 *            is the name of the tab
	 * @return the list of tasks that the tab is represented
	 */
	public static ArrayList<EzTask> getTaskListOfTheTab(String name) {
		JButton button = EzGUIButtonPanel.getInstance().getButton(name);
		return EzGUIButtonPanel.getInstance().getTaskListOfButton(button);
	}

	/**
	 * refresh the button
	 */
	public static void refreshButton() {
		EzGUIButtonPanel.getInstance().refreshButton();
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzGUI.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzGUIButtonPanel.java
	 */


/**
 * this class is the button panel of the GUI
 * 
 */
public class EzGUIButtonPanel extends JPanel {
	public final String ALL = "All";
	public final String DONE = "Done";
	public final String NOT_DONE = "Not Done";
	public final String TODAY = "Today";
	public final String TOMORROW = "Tomorrow";
	public final String UPCOMING = "Upcoming";
	public final String OVERDUE = "Overdue";
	public final String NO_DATE = "No Date";
	public final String HELP = "Help";

	private ArrayList<JButton> listOfButtons;
	private final String[] LIST_OF_BUTTON_NAMES = { ALL, DONE, NOT_DONE, TODAY,
			TOMORROW, UPCOMING, OVERDUE, NO_DATE, HELP };
	private final int BUTTON_HEIGHT = 40;
	private final int BUTTON_WIDTH = 160;
	private final Color BUTTON_TEXT_COLOR = EzConstants.PERSIAN_GREEN_COLOR;
	public final Color SELECTED_BUTTON_BG_COLOR = EzConstants.WHITE_SMOKE_COLOR;
	public final Color UNSELECTED_BUTTON_BG_COLOR = EzConstants.IRON_COLOR;

	private JButton selectedButton = null;

	static EzGUIButtonPanel buttonPanel;

	/**
	 * create or get the instance of this class
	 * 
	 * @return
	 */
	public static EzGUIButtonPanel getInstance() {
		if (buttonPanel == null) {
			buttonPanel = new EzGUIButtonPanel();
		}
		return buttonPanel;
	}

	/**
	 * Create the main panel.
	 */
	private EzGUIButtonPanel() {
		setBackground(EzGUI.BACKGROUND_COLOR);
		setBorder(null);
		setFocusable(false);

		listOfButtons = new ArrayList<JButton>();
		for (int i = 0; i < LIST_OF_BUTTON_NAMES.length; i++) {
			JButton button = initButton(LIST_OF_BUTTON_NAMES[i]);
			listOfButtons.add(button);
		}

		GroupLayout gl_buttonPanel = new GroupLayout(this);
		ParallelGroup prGroup = gl_buttonPanel
				.createParallelGroup(Alignment.LEADING);
		for (int i = 0; i < LIST_OF_BUTTON_NAMES.length; i++) {
			prGroup.addComponent(listOfButtons.get(i),
					GroupLayout.DEFAULT_SIZE, BUTTON_WIDTH,
					GroupLayout.PREFERRED_SIZE);
		}

		gl_buttonPanel.setHorizontalGroup(gl_buttonPanel.createParallelGroup(
				Alignment.TRAILING).addGroup(
				gl_buttonPanel.createSequentialGroup().addGroup(prGroup)));

		SequentialGroup sqGroup = gl_buttonPanel.createSequentialGroup();
		sqGroup.addGap(60);
		for (int i = 0; i < LIST_OF_BUTTON_NAMES.length; i++) {
			sqGroup.addComponent(listOfButtons.get(i),
					GroupLayout.PREFERRED_SIZE, BUTTON_HEIGHT,
					GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED).addGap(7);
		}
		gl_buttonPanel.setVerticalGroup(gl_buttonPanel.createParallelGroup(
				Alignment.LEADING).addGroup(sqGroup));
		setLayout(gl_buttonPanel);
	}

	/**
	 * create a button with a name
	 * 
	 * @param nameOfButton
	 * @return a JButton object
	 */
	private JButton initButton(String nameOfButton) {
		assert (nameOfButton != null);

		JButton button = new JButton(nameOfButton);
		button.setName(nameOfButton);

		if (nameOfButton.equalsIgnoreCase(HELP)) {
			button.setMnemonic(KeyEvent.VK_H);
		} else if (nameOfButton.equalsIgnoreCase(ALL)) {
			button.setMnemonic(KeyEvent.VK_A);
		} else if (nameOfButton.equalsIgnoreCase(DONE)) {
			button.setMnemonic(KeyEvent.VK_D);
		} else if (nameOfButton.equalsIgnoreCase(NOT_DONE)) {
			button.setMnemonic(KeyEvent.VK_N);
		} else if (nameOfButton.equalsIgnoreCase(TODAY)) {
			button.setMnemonic(KeyEvent.VK_T);
		} else if (nameOfButton.equalsIgnoreCase(TOMORROW)) {
			button.setMnemonic(KeyEvent.VK_M);
		} else if (nameOfButton.equalsIgnoreCase(UPCOMING)) {
			button.setMnemonic(KeyEvent.VK_U);
		} else if (nameOfButton.equalsIgnoreCase(OVERDUE)) {
			button.setMnemonic(KeyEvent.VK_P);
		} else if (nameOfButton.equalsIgnoreCase(NO_DATE)) {
			button.setMnemonic(KeyEvent.VK_E);
		}
		button.addActionListener(new ButtonAction());
		button.setFont(new Font(EzGUI.BUTTON_FONT, Font.BOLD, 16));
		button.setBackground(UNSELECTED_BUTTON_BG_COLOR);
		button.setBorderPainted(false);
		button.setForeground(BUTTON_TEXT_COLOR);
		button.setFocusPainted(false);
		button.setFocusable(false);
		return button;
	}

	/**
	 * this class will perform the action of the button
	 */
	class ButtonAction implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			JButton button = (JButton) e.getSource();
			pressButton(button);
		}
	}

	/**
	 * @param name
	 *            is the name of the button
	 * @return the button with the @param name
	 */
	public JButton getButton(String name) {
		for (int i = 0; i < listOfButtons.size(); i++) {
			if (listOfButtons.get(i).getName().equalsIgnoreCase(name)) {
				return listOfButtons.get(i);
			}
		}
		return null;
	}

	/**
	 * activate the button by its name
	 * 
	 * @param name
	 */
	public void pressButton(String name) {
		pressButton(getButton(name));
	}

	/**
	 * unhighlight all buttons
	 */
	public void unhighlightButton() {
		if (selectedButton != null) {
			selectedButton.setBackground(UNSELECTED_BUTTON_BG_COLOR);
			selectedButton = null;
		}
	}

	/**
	 * @return the current selected tab
	 */
	public String getCurrentTab() {
		if (selectedButton != null) {
			return selectedButton.getName();
		} else {
			return null;
		}
	}

	/**
	 * @param button
	 * @return the list of tasks that the button represents
	 */
	public ArrayList<EzTask> getTaskListOfButton(JButton button) {
		EzStorage storage = EzController.getStorage();
		assert (storage != null);

		if (button.getName().equalsIgnoreCase(ALL)) {
			return EzSort.sortById(storage.getListOfAllTasks());
		} else if (button.getName().equalsIgnoreCase(DONE)) {
			return EzSort.sortById(storage.getDoneTasks());
		} else if (button.getName().equalsIgnoreCase(NOT_DONE)) {
			return EzSort.sortByDate(storage.getUndoneTasks());
		} else if (button.getName().equalsIgnoreCase(TODAY)) {
			return EzSort.sortByPriority(storage.getTasksByDate(EzGUI
					.getToday()));
		} else if (button.getName().equalsIgnoreCase(TOMORROW)) {
			return EzSort.sortByPriority(storage.getTasksByDate(EzGUI
					.getTomorrow()));
		} else if (button.getName().equalsIgnoreCase(UPCOMING)) {
			return EzSort.sortByDate(storage.getComingTasks());
		} else if (button.getName().equalsIgnoreCase(OVERDUE)) {
			return EzSort.sortByDate(storage.getOverdueTasks());
		} else if (button.getName().equalsIgnoreCase(NO_DATE)) {
			return EzSort.sortByPriority(storage.getNoDateTasks());
		}
		return null;
	}

	/**
	 * activate the buttons
	 * 
	 * @param button
	 */
	private void pressButton(JButton button) {
		paintFocusedButton(button);
		EzStorage storage = EzController.getStorage();
		assert (storage != null);

		ArrayList<EzTask> list = getTaskListOfButton(button);

		if (button.getName().equalsIgnoreCase(HELP)) {
			EzGUI.showHelp();
		} else {
			if (list != null) {
				EzGUI.showContent(button.getName(), list);
			}
		}

		EzGUICommandPanel.getInstance().focusOnField();
	}

	/**
	 * highlight the @param button
	 */
	private void paintFocusedButton(JButton button) {
		if (selectedButton != null) {
			selectedButton.setBackground(UNSELECTED_BUTTON_BG_COLOR);
		}
		button.setBackground(SELECTED_BUTTON_BG_COLOR);
		selectedButton = button;
	}

	/**
	 * highlight the button by its name
	 * 
	 * @param name
	 */
	public void highlightButton(String name) {
		paintFocusedButton(getButton(name));
	}

	/**
	 * refresh the number on the button
	 */
	public void refreshButton() {
		if (listOfButtons != null) {
			EzStorage storage = EzController.getStorage();
			for (int i = 0; i < listOfButtons.size(); i++) {
				JButton button = listOfButtons.get(i);
				int numTask = 0;
				if (button.getName().equalsIgnoreCase(ALL)) {
					numTask = storage.getListOfAllTasks().size();
				} else if (button.getName().equalsIgnoreCase(DONE)) {
					numTask = storage.getDoneTasks().size();
				} else if (button.getName().equalsIgnoreCase(NOT_DONE)) {
					numTask = storage.getUndoneTasks().size();
				} else if (button.getName().equalsIgnoreCase(TODAY)) {
					numTask = storage.getTasksByDate(EzGUI.getToday()).size();
				} else if (button.getName().equalsIgnoreCase(TOMORROW)) {
					numTask = storage.getTasksByDate(EzGUI.getTomorrow())
							.size();
				} else if (button.getName().equalsIgnoreCase(UPCOMING)) {
					numTask = storage.getComingTasks().size();
				} else if (button.getName().equalsIgnoreCase(OVERDUE)) {
					numTask = storage.getOverdueTasks().size();
				} else if (button.getName().equalsIgnoreCase(NO_DATE)) {
					numTask = storage.getNoDateTasks().size();
				}
				if (!button.getName().equalsIgnoreCase(HELP)) {
					button.setText(button.getName() + " ["
							+ String.valueOf(numTask) + "]");
				}
			}
		}
	}

	/**
	 * press the below button
	 */
	public void pressBelowButton() {
		if (selectedButton == null) {
			pressButton(ALL);
		} else if (selectedButton == getButton(ALL)) {
			pressButton(DONE);
		} else if (selectedButton == getButton(DONE)) {
			pressButton(NOT_DONE);
		} else if (selectedButton == getButton(NOT_DONE)) {
			pressButton(TODAY);
		} else if (selectedButton == getButton(TODAY)) {
			pressButton(TOMORROW);
		} else if (selectedButton == getButton(TOMORROW)) {
			pressButton(UPCOMING);
		} else if (selectedButton == getButton(UPCOMING)) {
			pressButton(OVERDUE);
		} else if (selectedButton == getButton(OVERDUE)) {
			pressButton(NO_DATE);
		} else if (selectedButton == getButton(NO_DATE)) {
			pressButton(HELP);
		} else if (selectedButton == getButton(HELP)) {
			pressButton(ALL);
		}
	}

	/**
	 * press the above button
	 */
	public void pressAboveButton() {
		if (selectedButton == null) {
			pressButton(getButton(HELP));
		} else if (selectedButton == getButton(ALL)) {
			pressButton(getButton(HELP));
		} else if (selectedButton == getButton(DONE)) {
			pressButton(getButton(ALL));
		} else if (selectedButton == getButton(NOT_DONE)) {
			pressButton(getButton(DONE));
		} else if (selectedButton == getButton(TODAY)) {
			pressButton(getButton(NOT_DONE));
		} else if (selectedButton == getButton(TOMORROW)) {
			pressButton(getButton(TODAY));
		} else if (selectedButton == getButton(UPCOMING)) {
			pressButton(getButton(TOMORROW));
		} else if (selectedButton == getButton(OVERDUE)) {
			pressButton(getButton(UPCOMING));
		} else if (selectedButton == getButton(NO_DATE)) {
			pressButton(getButton(OVERDUE));
		} else if (selectedButton == getButton(HELP)) {
			pressButton(getButton(NO_DATE));
		}
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzGUIButtonPanel.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzGUICommandPanel.java
	 */


/**
 * this class is the command panel of the GUI
 */
public class EzGUICommandPanel extends JPanel {
	private static final String COMMAND_LABEL = "  Enter Command: ";

	private static final int WINDOW_SIZE_INCREMENT = 10;

	private static final int COMMAND_FIELD_HEIGHT = 10;
	private static final int COMMAND_FIELD_LENGTH = 100000;
	private static final int COMMAND_LABEL_FONT_SIZE = 17;
	private static final int COMMAND_LABEL_HEIGHT = 26;
	private static final int COMMAND_LABEL_WIDTH = 154;
	private static final int COMMAND_LABEL_PANEL_HEIGHT = 25;
	private static final int COMMAND_LABEL_PANEL_WIDTH = 160;
	private JTextPane commandField;
	private static EzGUICommandPanel commandPanel;
	private SimpleAttributeSet[] commandAttributeSet = new SimpleAttributeSet[4];
	private static final String COMMAND_FIELD_FONT = "Arial";
	private static final int COMMAND_FIELD_SIZE = 17;
	private ArrayList<String> commandHistory = new ArrayList<String>();
	private int historyPos = 0;
	private boolean showingFeedback = false;
	private static final String[] DOUBLE_QUOTE_KEYWORDS = { "add", "at",
			"title", "venue", "have" };

	/**
	 * @return the text of the command field
	 */
	public String getText() {
		return commandField.getText();
	}

	/**
	 * focus on the command field
	 */
	public void focusOnField() {
		commandField.requestFocus();
	}

	/**
	 * @return the instance of this class
	 */
	public static EzGUICommandPanel getInstance() {
		if (commandPanel == null) {
			commandPanel = new EzGUICommandPanel();
		}
		return commandPanel;
	}

	/**
	 * Create the main panel.
	 */
	private EzGUICommandPanel() {
		setLayout(new BorderLayout(0, 0));
		setBackground(EzGUI.BACKGROUND_COLOR);
		setBorder(null);
		setFocusable(false);
		createCommandLabel();
		createCommandInputField();
	}

	/**
	 * create a panel for the label next to the command field
	 */
	private void createCommandLabel() {
		JTextPane commandLabel = new JTextPane();
		commandLabel.setBounds(0, 0, COMMAND_LABEL_WIDTH, COMMAND_LABEL_HEIGHT);
		commandLabel.setEditable(false);
		commandLabel.setForeground(Color.WHITE);
		commandLabel.setFont(new Font(EzGUI.BUTTON_FONT, Font.BOLD,
				COMMAND_LABEL_FONT_SIZE));
		commandLabel.setBackground(EzGUI.BACKGROUND_COLOR);
		commandLabel.setText(COMMAND_LABEL);
		commandLabel.setFocusable(false);

		JPanel commandLabelPanel = new JPanel();
		commandLabelPanel.setBackground(EzGUI.BACKGROUND_COLOR);
		commandLabelPanel.setFocusable(false);
		commandLabelPanel.setPreferredSize(new Dimension(
				COMMAND_LABEL_PANEL_WIDTH, COMMAND_LABEL_PANEL_HEIGHT));
		commandLabelPanel.setLayout(null);
		commandLabelPanel.add(commandLabel);

		add(commandLabelPanel, BorderLayout.WEST);

	}

	/**
	 * create the panel for the command field
	 */
	private void createCommandInputField() {

		commandField = new JTextPane();
		commandField.setBackground(EzConstants.SHOW_AREA_BACKGROUND);
		commandField.grabFocus();
		commandField.addKeyListener(new EzKeyAdapter());

		JPanel newPanel = new JPanel();
		newPanel.add(commandField);
		newPanel.setPreferredSize(new Dimension(COMMAND_FIELD_LENGTH,
				COMMAND_FIELD_HEIGHT));
		newPanel.setLayout(new BoxLayout(newPanel, BoxLayout.X_AXIS));

		JScrollPane scroll = new JScrollPane(newPanel);

		scroll.setFocusable(false);
		scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.setLayout(new ScrollPaneLayout());
		scroll.setBorder(null);

		JPanel commandFieldpanel = new JPanel();
		commandFieldpanel.setLayout(new BoxLayout(commandFieldpanel,
				BoxLayout.X_AXIS));
		commandFieldpanel.add(scroll);
		add(commandFieldpanel);

		loadCommandAttributeSet();
	}

	/**
	 * this class will process according to the keyboard stroke
	 * 
	 */
	class EzKeyAdapter extends KeyAdapter {

		@Override
		public void keyPressed(KeyEvent arg0) {
			clearFeedback();
			if (arg0.isControlDown()) {
				if ((!arg0.isAltDown() && (!arg0.isShiftDown()))) { // only Ctrl
					switch (arg0.getKeyChar()) {
					case 22:
					case 25:
					case 26:
						arg0.consume();
						break;
					}
					switch (arg0.getKeyCode()) {
					case KeyEvent.VK_UP:
						EzGUI.scrollUp();
						arg0.consume();
						break;
					case KeyEvent.VK_DOWN:
						EzGUI.scrollDown();
						arg0.consume();
						break;
					case KeyEvent.VK_RIGHT:
						EzGUI.showPage(EzGUI.getPageToShow() + 1);
						arg0.consume();
						break;
					case KeyEvent.VK_LEFT:
						EzGUI.showPage(EzGUI.getPageToShow() - 1);
						arg0.consume();
						break;
					case KeyEvent.VK_1:
						EzGUIButtonPanel.getInstance().pressButton("All");
						break;
					case KeyEvent.VK_2:
						EzGUIButtonPanel.getInstance().pressButton("Done");
						break;
					case KeyEvent.VK_3:
						EzGUIButtonPanel.getInstance().pressButton("Not done");
						break;
					case KeyEvent.VK_4:
						EzGUIButtonPanel.getInstance().pressButton("Today");
						break;
					case KeyEvent.VK_5:
						EzGUIButtonPanel.getInstance().pressButton("Tomorrow");
						break;
					case KeyEvent.VK_6:
						EzGUIButtonPanel.getInstance().pressButton("Upcoming");
						break;
					case KeyEvent.VK_7:
						EzGUIButtonPanel.getInstance().pressButton("Overdue");
						break;
					case KeyEvent.VK_8:
						EzGUIButtonPanel.getInstance().pressButton("No date");
						break;
					case KeyEvent.VK_9:
					case KeyEvent.VK_H:
						EzGUIButtonPanel.getInstance().pressButton("Help");
						break;
					}
				} else if ((!arg0.isAltDown() && (arg0.isShiftDown()))) { // Ctrl
																			// +
																			// Shift
					int x = EzGUI.getMainFrameLocation().x;
					int y = EzGUI.getMainFrameLocation().y;

					switch (arg0.getKeyCode()) { // resize the window
					case KeyEvent.VK_UP:
						EzGUI.setMainFrameLocation(x, y - 10);
						arg0.consume();
						break;
					case KeyEvent.VK_DOWN:
						EzGUI.setMainFrameLocation(x, y + 10);
						arg0.consume();
						break;
					case KeyEvent.VK_LEFT:
						EzGUI.setMainFrameLocation(x - 10, y);
						arg0.consume();
						break;
					case KeyEvent.VK_RIGHT:
						EzGUI.setMainFrameLocation(x + 10, y);
						arg0.consume();
						break;
					}
				}
			} else if (!arg0.isAltDown()) {
				switch (arg0.getKeyChar()) {
				case KeyEvent.VK_ENTER:
					if (!EzGUISuggestPanel.getInstance().inSelectionMode()) {
						enterCommand();
					} else {
						EzGUISuggestPanel.getInstance().enterSelection();
					}
					arg0.consume();
					break;
				case KeyEvent.VK_BACK_SPACE:
				case KeyEvent.VK_DELETE:
					arg0.consume();
					break;
				}

				switch (arg0.getKeyCode()) {
				case KeyEvent.VK_UP:
					if (!EzGUISuggestPanel.getInstance().inSelectionMode()) {
						goToPreviousCommand();
					} else {
						EzGUISuggestPanel.getInstance().selectAbove();
					}
					arg0.consume();
					break;
				case KeyEvent.VK_DOWN:
					if (!EzGUISuggestPanel.getInstance().inSelectionMode()) {
						goToNextCommand();
					} else {
						EzGUISuggestPanel.getInstance().selectBelow();
					}
					arg0.consume();
					break;
				case KeyEvent.VK_F1:
					EzGUIButtonPanel.getInstance().pressButton("help");
					break;
				case KeyEvent.VK_TAB:
					if (!arg0.isShiftDown()) {
						EzGUIButtonPanel.getInstance().pressBelowButton();
					} else {
						EzGUIButtonPanel.getInstance().pressAboveButton();
					}
					arg0.consume();
					break;
				}

			} else {
				if ((arg0.isAltDown() && (arg0.isShiftDown()))) {
					switch (arg0.getKeyCode()) { // resize the window
					case KeyEvent.VK_UP:
						EzGUI.increaseWindowSize(0, -WINDOW_SIZE_INCREMENT);
						arg0.consume();
						break;
					case KeyEvent.VK_DOWN:
						EzGUI.increaseWindowSize(0, WINDOW_SIZE_INCREMENT);
						arg0.consume();
						break;
					case KeyEvent.VK_LEFT:
						EzGUI.increaseWindowSize(-WINDOW_SIZE_INCREMENT, 0);
						arg0.consume();
						break;
					case KeyEvent.VK_RIGHT:
						EzGUI.increaseWindowSize(WINDOW_SIZE_INCREMENT, 0);
						arg0.consume();
						break;
					}
				}
			}
		}

		@Override
		public void keyTyped(KeyEvent e) {
			// clearFeedback();
			int caretPos = commandField.getCaretPosition();
			if ((!e.isControlDown()) && (!e.isAltDown())) {
				switch (e.getKeyChar()) {
				case KeyEvent.VK_ENTER:
					break;
				case KeyEvent.VK_DELETE:
					deleteSelection();
					break;
				case KeyEvent.VK_BACK_SPACE:
					backSpaceSelection();
					break;
				case KeyEvent.VK_SPACE:
					typeSpace(caretPos);
					break;
				case KeyEvent.VK_TAB:
					e.consume();
					break;
				default:
					typeNormal("" + e.getKeyChar(), caretPos);
					break;
				}
				e.consume();
			} else {
				switch (e.getKeyChar()) {
				case 26: // CTRL + Z
					undo();
					e.consume();
					break;
				case 25: // CTRL + Y
					redo();
					e.consume();
					break;
				case 22: // CTRL + V
					pasteText();
					e.consume();
					break;
				default:
					break;
				}
			}
		}
	}

	/**
	 * clear the feedback on the command field
	 */
	private void clearFeedback() {
		if (showingFeedback) {
			showingFeedback = false;
			commandField.setText("");
		}
	}

	/**
	 * redo the action
	 */
	private void redo() {
		EzController.execute("redo");
	}

	/**
	 * undo the action
	 */
	private void undo() {
		EzController.execute("undo");
	}

	/**
	 * do the action paste into the command field
	 */
	private void pasteText() {
		int caretPos;
		commandField.paste();
		caretPos = commandField.getCaretPosition();
		addColorForCommandField(commandField.getText(),
				commandField.getStyledDocument());
		commandField.setCaretPosition(caretPos);
	}

	/**
	 * process when user type a space into the command field
	 * 
	 * @param caretPos
	 */
	private void typeSpace(int caretPos) {
		String contentInputField;
		contentInputField = commandField.getText();
		String result = "";
		String lastWord = "";
		boolean haveKeywordAvailable = false;
		boolean insideQuote = false;

		for (int i = 0; i < caretPos; i++) {
			if (contentInputField.charAt(i) == ' ') {
				result = result + " ";
				while ((i + 1 < caretPos)
						&& (contentInputField.charAt(i + 1) == ' ')) {
					i++;
					result = result + " ";
				}
			} else if (contentInputField.charAt(i) == '\"') {
				insideQuote = true;
				lastWord = "\"";
				while ((i + 1 < caretPos)
						&& (contentInputField.charAt(i + 1) != '\"')) {
					i++;
					lastWord = lastWord + contentInputField.charAt(i);
				}

				if (i + 1 < caretPos) {
					i++;
					lastWord = lastWord + contentInputField.charAt(i);
				}

				if ((lastWord.charAt(lastWord.length() - 1) == '\"')
						&& (lastWord.length() > 2)) {
					insideQuote = false;
				}

				result = result + lastWord;
			} else {
				lastWord = "" + contentInputField.charAt(i);
				while ((i + 1 < caretPos)
						&& (contentInputField.charAt(i + 1) != ' ')) {
					i++;
					lastWord = lastWord + contentInputField.charAt(i);
				}
				if (lastWord.equalsIgnoreCase("have")) {
					haveKeywordAvailable = true;
				}
				result = result + lastWord;
			}
		}

		if ((!insideQuote)
				&& (isDoubleQuoteKeyword(lastWord) || haveKeywordAvailable)) {
			result = result
					+ " \""
					+ contentInputField.substring(caretPos,
							contentInputField.length());
			addColorForCommandField(result, commandField.getStyledDocument());
			commandField.setCaretPosition(caretPos + 2);
		} else {
			result = result
					+ " "
					+ contentInputField.substring(caretPos,
							contentInputField.length());
			addColorForCommandField(result, commandField.getStyledDocument());
			commandField.setCaretPosition(caretPos + 1);
		}

		EzGUISuggestPanel.getInstance().loadSuggestion(contentInputField);
	}

	/**
	 * check if the word is the keyword that needs a quote after it or not
	 */
	private boolean isDoubleQuoteKeyword(String word) {
		for (int i = 0; i < DOUBLE_QUOTE_KEYWORDS.length; i++) {
			if (word.equalsIgnoreCase(DOUBLE_QUOTE_KEYWORDS[i])) {
				return true;
			}
		}
		return false;
	}

	/**
	 * delete the selection when pressing backspace
	 */
	private void backSpaceSelection() {
		String contentInputField;
		int startPos = commandField.getSelectionStart();
		if (commandField.getSelectionStart() == commandField.getSelectionEnd()) {
			if (commandField.getSelectionStart() > 0) {
				if ((commandField.getText().charAt(
						commandField.getSelectionStart() - 1) == '\"')
						&& (commandField.getSelectionStart() < commandField
								.getText().length())
						&& (commandField.getText().charAt(
								commandField.getSelectionStart()) == '\"')) {
					contentInputField = deleteString(commandField.getText(),
							commandField.getSelectionStart() - 1,
							commandField.getSelectionStart() + 1);
				} else {
					contentInputField = deleteString(commandField.getText(),
							commandField.getSelectionStart() - 1,
							commandField.getSelectionStart());
				}
				addColorForCommandField(contentInputField,
						commandField.getStyledDocument());
				commandField.setCaretPosition(startPos - 1);
				EzGUISuggestPanel.getInstance().loadSuggestion(
						contentInputField);
			}
		} else {
			contentInputField = deleteString(commandField.getText(),
					commandField.getSelectionStart(),
					commandField.getSelectionEnd());
			addColorForCommandField(contentInputField,
					commandField.getStyledDocument());
			commandField.setCaretPosition(startPos);
			EzGUISuggestPanel.getInstance().loadSuggestion(contentInputField);
		}

	}

	/**
	 * process when user press ENTER
	 */
	private void enterCommand() {
		String fb = EzController.execute(commandField.getText());
		commandHistory.add(commandField.getText());
		historyPos = commandHistory.size();
		if (fb != null) {
			addColorForFeedBack(fb, commandField.getStyledDocument());
			showingFeedback = true;
		} else {
			addColorForFeedBack("No feedback.",
					commandField.getStyledDocument());
			showingFeedback = true;
		}
	}

	/**
	 * go to the next command in the command history
	 */
	private void goToNextCommand() {
		if (historyPos < commandHistory.size()) {
			historyPos++;
			if (historyPos < commandHistory.size()) {
				addColorForCommandField(commandHistory.get(historyPos),
						commandField.getStyledDocument());
			} else {
				addColorForCommandField("", commandField.getStyledDocument());
			}
		}
	}

	/**
	 * go to the previous command in the command history
	 */
	private void goToPreviousCommand() {
		if (historyPos > 0) {
			historyPos--;
			addColorForCommandField(commandHistory.get(historyPos),
					commandField.getStyledDocument());
		}
	}

	/**
	 * delete the selection when DEL is pressed
	 */
	public void deleteSelection() {
		String contentInputField;
		int endPos = commandField.getSelectionStart();
		if (commandField.getSelectionStart() == commandField.getSelectionEnd()) {
			if (commandField.getSelectionStart() < commandField.getText()
					.length()) {
				contentInputField = deleteString(commandField.getText(),
						commandField.getSelectionStart(),
						commandField.getSelectionEnd() + 1);
				addColorForCommandField(contentInputField,
						commandField.getStyledDocument());
				commandField.setCaretPosition(endPos);
				EzGUISuggestPanel.getInstance().loadSuggestion(
						contentInputField);
			}
		} else {
			int endCaretPos = commandField.getSelectionEnd();
			if ((endCaretPos < commandField.getText().length())
					&& (commandField.getText().charAt(endCaretPos) == '\"')) {
				endCaretPos++;
			}
			contentInputField = deleteString(commandField.getText(),
					commandField.getSelectionStart(), endCaretPos);
			addColorForCommandField(contentInputField,
					commandField.getStyledDocument());
			commandField.setCaretPosition(endPos);
			EzGUISuggestPanel.getInstance().loadSuggestion(contentInputField);
		}
	}

	/**
	 * set the selection in the command field
	 * 
	 * @param start
	 * @param end
	 */
	public void setSelection(int start, int end) {
		commandField.setSelectionStart(start);
		commandField.setSelectionEnd(end);
	}

	/**
	 * @return the position of the caret
	 */
	public int getCaretPosition() {
		return commandField.getCaretPosition();
	}

	/**
	 * get the start position of the selection in the command field
	 * 
	 * @return
	 */
	public int getSelectionStart() {
		return commandField.getSelectionStart();
	}

	/**
	 * process when user type normal character
	 * 
	 * @param typedText
	 * @param caretPos
	 */
	public void typeNormal(String typedText, int caretPos) {
		String contentInputField;
		contentInputField = commandField.getText().substring(0, caretPos)
				+ typedText
				+ commandField.getText().substring(caretPos,
						commandField.getText().length());
		addColorForCommandField(contentInputField,
				commandField.getStyledDocument());
		commandField.setCaretPosition(caretPos + typedText.length());

		EzGUISuggestPanel.getInstance().loadSuggestion(contentInputField);
	}

	/**
	 * delete a part of a string
	 * 
	 * @param text
	 * @param startPos
	 * @param endPos
	 * @return the result string
	 */
	private String deleteString(String text, int startPos, int endPos) {
		return text.substring(0, startPos) + text.substring(endPos);
	}

	/**
	 * add color to the command field
	 * 
	 * @param contentInputField
	 * @param doc
	 */
	private void addColorForCommandField(String contentInputField,
			StyledDocument doc) {
		try {
			doc.remove(0, doc.getLength());
		} catch (BadLocationException e2) {
			e2.printStackTrace();
		}
		for (int i = 0; i < contentInputField.length(); i++) {
			String word = "";
			if (contentInputField.charAt(i) == ' ') {
				word = " ";
				while ((i + 1 < contentInputField.length())
						&& (contentInputField.charAt(i + 1) == ' ')) {
					i++;
					word = word + ' ';
				}
				try {
					doc.insertString(doc.getLength(), word,
							commandAttributeSet[0]);
				} catch (BadLocationException e1) {
					e1.printStackTrace();
				}
			} else if (contentInputField.charAt(i) == '\"') {
				word = "\"";
				while ((i + 1 < contentInputField.length())
						&& (contentInputField.charAt(i + 1) != '\"')) {
					i++;
					word = word + contentInputField.charAt(i);
				}
				if (i + 1 < contentInputField.length()) {
					i++;
					word = word + contentInputField.charAt(i);
				}
				try {
					doc.insertString(doc.getLength(), word,
							commandAttributeSet[2]);
				} catch (BadLocationException e1) {
					e1.printStackTrace();
				}
			} else {
				word = "" + contentInputField.charAt(i);
				while ((i + 1 < contentInputField.length())
						&& (contentInputField.charAt(i + 1) != ' ')) {
					i++;
					word = word + contentInputField.charAt(i);
				}
				if (EzGUI.isKeyword(word)) {
					try {
						doc.insertString(doc.getLength(), word,
								commandAttributeSet[1]);
					} catch (BadLocationException e1) {
						e1.printStackTrace();
					}
				} else {
					try {
						doc.insertString(doc.getLength(), word,
								commandAttributeSet[0]);
					} catch (BadLocationException e1) {
						e1.printStackTrace();
					}
				}
			}
		}
	}

	/**
	 * add color for the feedback
	 * 
	 * @param feedback
	 * @param doc
	 */
	private void addColorForFeedBack(String feedback, StyledDocument doc) {
		try {
			doc.remove(0, doc.getLength());
			doc.insertString(doc.getLength(), feedback, commandAttributeSet[3]);
		} catch (BadLocationException e2) {
			e2.printStackTrace();
		}
	}

	/**
	 * load the text attributes used in the command field
	 */
	private void loadCommandAttributeSet() {
		commandAttributeSet[0] = new SimpleAttributeSet();
		StyleConstants
				.setFontFamily(commandAttributeSet[0], COMMAND_FIELD_FONT);
		StyleConstants.setFontSize(commandAttributeSet[0], COMMAND_FIELD_SIZE);

		commandAttributeSet[1] = new SimpleAttributeSet(commandAttributeSet[0]);
		StyleConstants.setForeground(commandAttributeSet[1],
				EzConstants.MARINER_COLOR);

		commandAttributeSet[2] = new SimpleAttributeSet(commandAttributeSet[0]);
		StyleConstants.setForeground(commandAttributeSet[2],
				EzConstants.IRON_GRAY_COLOR);

		commandAttributeSet[3] = new SimpleAttributeSet(commandAttributeSet[0]);
		StyleConstants.setForeground(commandAttributeSet[3],
				EzConstants.TERRA_COTTA_COLOR);
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzGUICommandPanel.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzGUIDisplayPanel.java
	 */


/**
 * this class is a scroll panel for storing the content
 */
public class EzGUIDisplayPanel extends JScrollPane {
	private static final int SCROLLING_INCREMENT = 20;

	/**
	 * initialize the scroll panel
	 * 
	 * @param view
	 *            is a JEditorPane, which actually show the content
	 */
	public EzGUIDisplayPanel(Component view) {
		super(view);
		setFocusable(false);
		setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		setLayout(new ScrollPaneLayout());
		setBorder(null);

		view.setBackground(EzConstants.SHOW_AREA_BACKGROUND);
		((JEditorPane) view).setEditable(false);
		((JEditorPane) view).setContentType("text/html");
		view.setFocusable(false);
	}

	/**
	 * scroll the view down
	 */
	public void scrollDown() {
		getVerticalScrollBar().setValue(
				getVerticalScrollBar().getValue() + SCROLLING_INCREMENT);
	}

	/**
	 * scroll the view up
	 */
	public void scrollUp() {
		getVerticalScrollBar().setValue(
				getVerticalScrollBar().getValue() - SCROLLING_INCREMENT);
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzGUIDisplayPanel.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzGUIMainPanel.java
	 */


/**
 * this class is the main panel of the GUI, containing other components
 * 
 */
public class EzGUIMainPanel extends JPanel {

	/**
	 * Create the main panel.
	 */
	public EzGUIMainPanel() {
		setFocusable(false);
		setBackground(EzGUI.BACKGROUND_COLOR);
		setBorder(new EmptyBorder(10, 10, 10, 10));
		setLayout(new BorderLayout(0, 10));
	}

}

	// End of segment: E:\Java Projects\CS2103T\src\EzGUIMainPanel.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzGUISuggestPanel.java
	 */

public class EzGUISuggestPanel extends JDialog {
	public static final int ORIGINAL_HEIGHT = 85;
	public static final int ORIGINAL_WIDTH = 784;
	public static final int SUGGEST_PANEL_Y_RELATIVE_POS = 10;
	public static final int SUGGEST_PANEL_X_RELATIVE_POS = 165;

	private JList<String> suggestList;
	private JScrollPane suggestScrollPanel;
	private static EzGUISuggestPanel suggestPanel;
	private boolean selectionMode = false;

	/**
	 * create or get the instance of this class
	 * 
	 * @return
	 */
	public static EzGUISuggestPanel getInstance() {
		if (suggestPanel == null) {
			suggestPanel = new EzGUISuggestPanel(EzGUI.getMainFrame(),
					"Suggest", false);
		}
		return suggestPanel;
	}

	/**
	 * check if it is in the selection mode or not
	 */
	public boolean inSelectionMode() {
		return selectionMode;
	}

	/**
	 * initiate the suggest panel
	 * 
	 * @param owner
	 * @param title
	 * @param modal
	 */
	private EzGUISuggestPanel(Frame owner, String title, boolean modal) {
		super(owner, title, modal);
		suggestPanel = this;

		int x = owner.getLocation().x + SUGGEST_PANEL_X_RELATIVE_POS;
		int y = owner.getLocation().y + this.getHeight()
				- SUGGEST_PANEL_Y_RELATIVE_POS;
		setLocation(x, y);
		setMinimumSize(new Dimension(ORIGINAL_WIDTH, ORIGINAL_HEIGHT));

		ArrayList<EzTask> listTask = EzController.getStorage()
				.getListOfAllTasks();
		String[] listString = new String[listTask.size()];

		for (int i = 0; i < listTask.size(); i++) {
			listString[i] = listTask.get(i).toString();
		}

		suggestList = new JList<String>(listString);
		suggestList.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if (arg0.getClickCount() == 2) {
					enterSelection();
				}
			}
		});
		suggestList.setBackground(EzConstants.WHITE_SMOKE_COLOR);

		suggestScrollPanel = new JScrollPane(suggestList);
		suggestScrollPanel.setFocusable(false);
		suggestScrollPanel
				.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		suggestScrollPanel
				.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		suggestScrollPanel.setLayout(new ScrollPaneLayout());
		suggestScrollPanel.setBorder(BorderFactory.createLineBorder(
				EzConstants.CHATEAU_GREEN_COLOR, 5));
		suggestScrollPanel.setPreferredSize(new Dimension(ORIGINAL_WIDTH,
				ORIGINAL_HEIGHT));

		getContentPane().add(suggestScrollPanel, BorderLayout.SOUTH);
		setUndecorated(true);
		pack();
		setFocusableWindowState(false);
		setVisible(false);
		selectionMode = false;
	}

	/**
	 * process when the user presses enter
	 */
	public void enterSelection() {
		int selectIndex = suggestList.getSelectedIndex();
		loadSuggestion(EzGUICommandPanel.getInstance().getText());
		if ((0 <= selectIndex)
				&& (selectIndex < suggestList.getModel().getSize())) {
			int taskId = getFirstNumber(suggestList.getModel().getElementAt(
					selectIndex));
			if (taskId > -1) {
				int caretPos = EzGUICommandPanel.getInstance()
						.getSelectionStart();
				EzGUICommandPanel.getInstance().deleteSelection();
				EzGUICommandPanel.getInstance().typeNormal(
						String.valueOf(taskId) + " ", caretPos);
			}
		}
		suggestList.setSelectedIndex(-1);
		selectionMode = false;
		setVisible(false);
	}

	/**
	 * @param text
	 * @return the first number in a string
	 */
	private int getFirstNumber(String text) {
		int result = -1;
		int i = 0;
		while ((text.charAt(i) < '0') || (text.charAt(i) > '9')) {
			i++;
		}
		if ((text.charAt(i) >= '0') && (text.charAt(i) <= '9')) {
			result = 0;
			while ((text.charAt(i) >= '0') && (text.charAt(i) <= '9')) {
				result = result * 10 + (int) (text.charAt(i) - '0');
				i++;
			}
		}
		return result;
	}

	/**
	 * load the suggestion when the user types
	 * 
	 * @param contentInputField
	 */
	public void loadSuggestion(String contentInputField) {
		boolean activateSuggestion = false;
		int startCaretPos = -1;

		ArrayList<String> notKeywordOrNumberList = new ArrayList<String>();
		int length = contentInputField.length();
		String word;
		String lastKeyword = "";
		boolean doneOrDeleteKeywordAvailable = false;
		boolean removeKeywordAvailable = false;
		int firstPosNotKeywordOrNumber = -1;
		// int lastPosNotKeywordOrNumber = -1;

		for (int i = 0; i < length; i++) {
			if (contentInputField.charAt(i) == ' ') {
				while ((i + 1 < length)
						&& (contentInputField.charAt(i + 1) == ' ')) {
					i++;
				}
			} else if (contentInputField.charAt(i) == '\"') {
				if (firstPosNotKeywordOrNumber == -1) {
					firstPosNotKeywordOrNumber = i;
				}
				word = "";
				while ((i + 1 < length)
						&& (contentInputField.charAt(i + 1) != '\"')) {
					i++;
					word = word + contentInputField.charAt(i);
				}

				if (i + 1 < length) {
					i++;
				}
				// lastPosNotKeywordOrNumber = i;
				notKeywordOrNumberList.add(word.trim());
			} else {
				int tmp = i;
				word = "" + contentInputField.charAt(i);
				while ((i + 1 < length)
						&& (contentInputField.charAt(i + 1) != ' ')) {
					i++;
					word = word + contentInputField.charAt(i);
				}

				if (EzGUI.isKeyword(word)) {
					lastKeyword = word;
					if (word.equalsIgnoreCase("remove")) {
						removeKeywordAvailable = true;
					}
					if (word.equalsIgnoreCase("done")
							|| word.equalsIgnoreCase("undone")
							|| word.equalsIgnoreCase("delete")) {
						doneOrDeleteKeywordAvailable = true;
					}
				}

				if ((!EzGUI.isKeyword(word)) && (!isNumber(word))) {
					notKeywordOrNumberList.add(word);
					if (firstPosNotKeywordOrNumber == -1) {
						firstPosNotKeywordOrNumber = tmp;
					}
					// lastPosNotKeywordOrNumber = i;
					if (startCaretPos == -1) {
						startCaretPos = i - word.length() + 1;
					}
				}
			}
		}

		if (lastKeyword.equalsIgnoreCase("done")
				|| lastKeyword.equalsIgnoreCase("undone")
				|| lastKeyword.equalsIgnoreCase("delete")
				|| lastKeyword.equalsIgnoreCase("update")
				|| (lastKeyword.equalsIgnoreCase("date") && removeKeywordAvailable)
				|| (lastKeyword.equalsIgnoreCase("time") && removeKeywordAvailable)
				|| (lastKeyword.equalsIgnoreCase("venue") && removeKeywordAvailable)
				|| (lastKeyword.equalsIgnoreCase("from") && doneOrDeleteKeywordAvailable)
				|| (lastKeyword.equalsIgnoreCase("to") && doneOrDeleteKeywordAvailable)) {
			activateSuggestion = true;
		}

		if (activateSuggestion) {
			suggestList.removeAll();

			// LOGGER.log(Level.INFO, String.format("List keywords: %d",
			// notKeywordOrNumberList.size()));

			ArrayList<EzTask> listTask = EzSort.sortById(EzController
					.getStorage().getTasksByKeywords(notKeywordOrNumberList));
			String[] listString = new String[listTask.size()];

			for (int i = 0; i < listTask.size(); i++) {
				listString[i] = listTask.get(i).toString();
			}

			suggestList.setListData(listString);
			if (listString.length > 0) {
				suggestList.setSelectedIndex(0);
			} else {
				suggestList.clearSelection();
			}

			selectionMode = true;
			suggestPanel.setVisible(true);

			if (firstPosNotKeywordOrNumber != -1) {
				EzGUICommandPanel.getInstance().setSelection(
						firstPosNotKeywordOrNumber,
						EzGUICommandPanel.getInstance().getCaretPosition());
			}
		} else {
			suggestList.clearSelection();
			selectionMode = false;
			suggestPanel.setVisible(false);
		}
		suggestPanel.pack();
	}

	/**
	 * check if the string is a number or not
	 * 
	 * @param word
	 * @return
	 */
	private boolean isNumber(String word) {
		for (int i = 0; i < word.length(); i++) {
			if ((word.charAt(i) < '0') || (word.charAt(i) > '9')) {
				return false;
			}
		}
		return true;
	}

	/**
	 * process when the user press down arrow
	 */
	public void selectBelow() {
		int selectIndex = suggestList.getSelectedIndex();
		selectIndex++;
		if (selectIndex >= suggestList.getModel().getSize()) {
			selectIndex = -1;
		}
		if ((0 <= selectIndex)
				&& (selectIndex < suggestList.getModel().getSize())) {
			suggestList.setSelectedIndex(selectIndex);
			suggestList.ensureIndexIsVisible(selectIndex);
		} else {
			suggestList.clearSelection();
		}
	}

	/**
	 * process when the user press up arrow
	 */
	public void selectAbove() {
		int selectIndex = suggestList.getSelectedIndex();
		selectIndex--;
		if (selectIndex < -1) {
			selectIndex = suggestList.getModel().getSize() - 1;
		}
		if ((0 <= selectIndex)
				&& (selectIndex < suggestList.getModel().getSize())) {
			suggestList.setSelectedIndex(selectIndex);
			suggestList.ensureIndexIsVisible(selectIndex);
		} else {
			suggestList.clearSelection();
		}
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzGUISuggestPanel.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzHtmlGenerator.java
	 */

/**
 * this class creates HTML code for displaying the content
 * 
 */
public class EzHtmlGenerator {

	private static final int TIME_FONT_SIZE = 5;

	private static final int DAY_OF_WEEK_CALENDAR_FONT_SIZE = 2;
	private static final int MONTH_CALENDAR_FONT_SIZE = 3;
	private static final int DATE_CALENDAR_FONT_SIZE = 3;
	private static final int YEAR_CALENDAR_FONT_SIZE = 2;

	private static final int MAXIMUM_CHARACTER = 20;

	private static final int STAR_PER_LINE = 5;

	private static final int MAIN_TITLE_FONT_SIZE = 8;
	private static final Color MAIN_TITLE_FONT_COLOR = new Color(231, 76, 60);
	private static final String MAIN_TITLE_FONT_FONT = "Arial";

	private static final String TITLE_FONT_FONT = "Arial";
	private static final int TITLE_FONT_SIZE = 5;
	private static final Color TITLE_FONT_COLOR = EzConstants.WHITE_SMOKE_COLOR;

	private static final String VENUE_FONT_FONT = "Arial Rounded MT Bold";
	private static final int VENUE_FONT_SIZE = 4;
	private static final Color VENUE_FONT_COLOR = EzConstants.WHITE_SMOKE_COLOR;

	private static final String ID_FONT_FONT = "Arial Rounded MT Bold";
	private static final int ID_FONT_SIZE = 4;
	private static final Color ID_FONT_COLOR = EzConstants.WHITE_SMOKE_COLOR;

	private static final String IMAGE_CALENDAR_PNG = "images/calendar.png";
	private static final String IMAGE_CLOCK_PNG = "images/clock.png";
	private static final String IMAGE_DONE_PNG = "images/done.png";

	private static final int NORMAL_TASK = 0;
	private static final int PAST_OR_DONE_TASK = 1;
	private static final int TODAY_AND_UNDONE_TASK = 2;
	private static final int OVERDUE_TASK = 3;

	private static final Color[] TASK_BG_COLOR = {
			EzConstants.CHATEAU_GREEN_COLOR, // for normal tasks
			EzConstants.ALMOND_FROST_COLOR, // for past or done tasks
			EzConstants.CURIOUS_BLUE_COLOR, // for today and undone tasks
			EzConstants.TERRA_COTTA_COLOR };

	private static final Color ID_BG_COLOR = EzConstants.BLUE_GEM_COLOR;

	private static final Color CALENDAR_DATE_FONT_COLOR = new Color(231, 76, 60);

	private static final String[] CALENDAR_MONTH = { "Jan", "Feb", "March",
			"Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
	private static final String[] CALENDAR_DAY_OF_WEEK = { "", "Sun", "Mon",
			"Tue", "Wed", "Thu", "Fri", "Sat" };

	/**
	 * wrap the content in <td> tag
	 * @param format
	 * @param content
	 * @return
	 */
	private static String td(String format, String content) {
		return "<td " + format + ">" + content + "</td>";
	}

	/**
	 * wrap the content in <td> tag
	 * @param content
	 * @return
	 */
	private static String td(String content) {
		return td("", content);
	}

	/**
	 * wrap the content in <tr> tag
	 * @param format
	 * @param content
	 * @return
	 */
	private static String tr(String format, String content) {
		return "<tr " + format + ">" + content + "</tr>";
	}

	/**
	 * wrap the content in <tr> tag
	 * @param content
	 * @return
	 */
	private static String tr(String content) {
		return tr("", content);
	}

	/**
	 * wrap the content in <table> tag
	 * @param format
	 * @param content
	 * @return
	 */
	private static String table(String format, String content) {
		return "<table " + format + ">" + content + "</table>";
	}

	/**
	 * create HTML code representing the task
	 * @param task
	 * @return
	 */
	public static String createHtmlEzTask(EzTask task) {
		if (task != null) {
			int typeOfTask = NORMAL_TASK;
			if (task.isDone()) {
				typeOfTask = PAST_OR_DONE_TASK;
			} else if (task.isPast() && (!task.isDone())) {
				typeOfTask = OVERDUE_TASK;
			} else if (task.isToday()) {
				typeOfTask = TODAY_AND_UNDONE_TASK;
			}
			String tableFormat = "border=0 cellspacing=0 cellpadding=1 bgcolor=\"#"
					+ convertColorToHex(TASK_BG_COLOR[typeOfTask])
					+ "\" width=\"100%\"";
			String tableContent = tr(td("width=\"53px\" bgcolor=\"#"
					+ convertColorToHex(ID_BG_COLOR) + "\"  height=\"40px\"",
					createHtmlIdAndPriorityOfEzTask(task))
					+ td("width=\"5px\"", "")
					+ td(createHtmlTitleAndVenueOfEzTask(task))
					+ td("width=\"15px\"", "")
					+ td("align=\"left\" width=\"200px\"",
							createHtmlDateOfEzTask(task))
					+ td("align=\"right\" width=\"40px\"",
							createHtmlDoneOfEzTask(task)));
			return table(tableFormat, tableContent);
		} else {
			return "";
		}
	}

	/**
	 * create HTML code for DONE part
	 * @param task
	 * @return
	 */
	private static String createHtmlDoneOfEzTask(EzTask task) {
		if (task.isDone()) {
			return img(IMAGE_DONE_PNG);
		}
		return "";
	}

	/**
	 * create HTML code for DATE part
	 * @param task
	 * @return
	 */
	private static String createHtmlDateOfEzTask(EzTask task) {
		GregorianCalendar date1 = task.getStartTime();
		GregorianCalendar date2 = task.getEndTime();
		ArrayList<String> list = new ArrayList<String>();

		if ((date1 == null) || (date2 == null)) {
			return "";
		} else {
			if (date1.equals(date2)) {
				list.add(createHtmlCalendar(date1));
				// if ((date1.get(Calendar.HOUR_OF_DAY)!=0) ||
				// (date1.get(Calendar.MINUTE)!=0)){
				list.add(createHtmlClock(date1));
				// }
			} else {
				list.add(createHtmlCalendar(date1));
				if ((date1.get(Calendar.HOUR_OF_DAY) != 0)
						|| (date1.get(Calendar.MINUTE) != 0)
						|| (date2.get(Calendar.HOUR_OF_DAY) != 23)
						|| (date2.get(Calendar.MINUTE) != 59)) {
					list.add(createHtmlClock(date1));
				}
				if ((date1.get(Calendar.YEAR) != date2.get(Calendar.YEAR))
						|| (date1.get(Calendar.MONTH) != date2
								.get(Calendar.MONTH))
						|| (date1.get(Calendar.DATE) != date2
								.get(Calendar.DATE))
						|| (date1.get(Calendar.HOUR_OF_DAY) != 0)
						|| (date1.get(Calendar.MINUTE) != 0)
						|| (date2.get(Calendar.HOUR_OF_DAY) != 23)
						|| (date2.get(Calendar.MINUTE) != 59)) {
					list.add(img("images/rightArrow.png"));
				}
				if ((date1.get(Calendar.YEAR) != date2.get(Calendar.YEAR))
						|| (date1.get(Calendar.MONTH) != date2
								.get(Calendar.MONTH))
						|| (date1.get(Calendar.DATE) != date2
								.get(Calendar.DATE))) {
					list.add(createHtmlCalendar(date2));
				}
				if ((date1.get(Calendar.HOUR_OF_DAY) != 0)
						|| (date1.get(Calendar.MINUTE) != 0)
						|| (date2.get(Calendar.HOUR_OF_DAY) != 23)
						|| (date2.get(Calendar.MINUTE) != 59)) {
					list.add(createHtmlClock(date2));
				}
			}
		}
		return createHtmlTable(1, list.size(), list,
				"border=0 cellspacing=0 cellpadding=1");
	}

	/**
	 * create the table with a specific number of rows and columns
	 * @param row
	 * @param col
	 * @param list
	 * @param tableAttribute
	 * @return
	 */
	public static String createHtmlTable(int row, int col,
			ArrayList<String> list, String tableAttribute) {
		String result = "";
		for (int i = 0; i < row; i++) {
			String tdList = "";
			for (int j = 0; j < col; j++) {
				if (i * col + j < list.size()) {
					tdList += td(list.get(i * col + j));
				}
			}
			result = result + tr(tdList);
		}
		return table(tableAttribute, result);
	}

	/**
	 * create the table with a header
	 * @param header
	 * @param content
	 * @param tableAttribute
	 * @return
	 */
	public static String createHtmlTableWithHeader(String header,
			String content, String tableAttribute) {
		header = EzHtmlGenerator.createHtmlText("__", MAIN_TITLE_FONT_FONT, 2,
				EzConstants.SHOW_AREA_BACKGROUND)
				+ EzHtmlGenerator.createHtmlText(header, MAIN_TITLE_FONT_FONT,
						MAIN_TITLE_FONT_SIZE, MAIN_TITLE_FONT_COLOR);
		String result = table(tableAttribute,
				tr(td("height=\"44px\" width=\"100%\" ", header))
						+ tr(td(content)));
		return result;
	}

	/**
	 * create HTML code for TITLE and VENUE part
	 * @param task
	 * @return
	 */
	private static String createHtmlTitleAndVenueOfEzTask(EzTask task) {
		String result = createHtmlText(addBreak(task.getTitle()),
				TITLE_FONT_FONT, TITLE_FONT_SIZE, TITLE_FONT_COLOR);
		if (!task.getVenue().equalsIgnoreCase("")) {
			result = result
					+ "<br>"
					+ right(createHtmlText("@" + addBreak(task.getVenue()),
							VENUE_FONT_FONT, VENUE_FONT_SIZE, VENUE_FONT_COLOR));
		}
		return result;
	}

	/**
	 * add breaks for too long word
	 * @param text
	 * @return
	 */
	private static String addBreak(String text) {
		String result = "";
		for (int i = 0; i < text.length(); i++) {
			result = result + text.charAt(i);
			if (text.charAt(i) == ' ') {
				while ((i + 1 < text.length()) && (text.charAt(i + 1) == ' ')) {
					result = result + ' ';
					i++;
				}
			} else {
				int count = 1;
				while ((i + 1 < text.length()) && (text.charAt(i + 1) != ' ')) {
					result = result + text.charAt(i + 1);
					i++;
					count++;
					if (count == MAXIMUM_CHARACTER) {
						result = result + "-<br/>";
						count = 0;
					}
				}
			}
		}
		return result;
	}

	/**
	 * create HTML code for ID and PRIORITY part
	 * @param task
	 * @return
	 */
	private static String createHtmlIdAndPriorityOfEzTask(EzTask task) {
		String htmlId = createHtmlText("#" + task.getId(), ID_FONT_FONT,
				ID_FONT_SIZE, ID_FONT_COLOR);
		String htmlPriority = createHtmlStar(task.getPriority());

		return table("width=\"48px\"", tr(td(center(htmlId)))
				+ tr(td(center(htmlPriority))));
	}

	/**
	 * create HTML code the the calendar
	 * @param date
	 * @return
	 */
	private static String createHtmlCalendar(GregorianCalendar date) {
		String dayOfWeekHtmlText = createHtmlText(
				CALENDAR_DAY_OF_WEEK[date.get(Calendar.DAY_OF_WEEK)],
				"Arial Rounded MT Bold", DAY_OF_WEEK_CALENDAR_FONT_SIZE,
				Color.white);
		String monthHtmlText = createHtmlText(
				CALENDAR_MONTH[date.get(Calendar.MONTH)],
				"Arial Rounded MT Bold", MONTH_CALENDAR_FONT_SIZE,
				CALENDAR_DATE_FONT_COLOR);
		String dateHtmlText = createHtmlText(
				String.valueOf(date.get(Calendar.DATE)),
				"Arial Rounded MT Bold", DATE_CALENDAR_FONT_SIZE,
				CALENDAR_DATE_FONT_COLOR);
		String yearHtmlText = createHtmlText(
				String.valueOf(date.get(Calendar.YEAR)), "Arial",
				YEAR_CALENDAR_FONT_SIZE, CALENDAR_DATE_FONT_COLOR);

		return table(
				"background=\"file:"
						+ IMAGE_CALENDAR_PNG
						+ "\" border=0 cellspacing=0 cellpadding=0 width=\"38px\"",
				tr(td("height=\"10px\"", center(dayOfWeekHtmlText)))
						+ tr(td("height=\"17px\"", center(monthHtmlText + " "
								+ dateHtmlText)))
						+ tr(td("height=\"10px\"", center(yearHtmlText))));
	}

	/**
	 * create HTML code for the clock
	 * @param date
	 * @return
	 */
	private static String createHtmlClock(GregorianCalendar date) {
		String hour = String.valueOf(date.get(Calendar.HOUR_OF_DAY));
		if (date.get(Calendar.HOUR_OF_DAY) < 10) {
			hour = "0" + hour;
		}

		String minute = String.valueOf(date.get(Calendar.MINUTE));
		if (date.get(Calendar.MINUTE) < 10) {
			minute = "0" + minute;
		}

		String timeHtmlText = createHtmlText(hour + ":" + minute,
				"Digital Dismay", TIME_FONT_SIZE, "38e204");

		return table(
				"background=\"file:"
						+ IMAGE_CLOCK_PNG
						+ "\" border=0 cellspacing=0 cellpadding=0 width=\"40px\"",
				tr(td("width=\"2px\"", "")
						+ td("height=\"25px\"", center(timeHtmlText))));
	}

	/**
	 * create HTML code to show an image by its URL
	 * @param url
	 * @return
	 */
	private static String img(String url) {
		return "<img src=\"file:" + url + "\">";
	}

	/**
	 * create the stars for priority part
	 * @param numStar
	 * @return
	 */
	private static String createHtmlStar(int numStar) {
		String result = "";
		String chosenStar = "";
		switch (numStar) {
		case 1:
			chosenStar = img("images/star080.png");
			break;
		case 2:
			chosenStar = img("images/star040.png");
			break;
		default:
			chosenStar = img("images/star000.png");
			break;
		}
		for (int i = 0; i < Math.min(EzConstants.MAXIMUM_PRIORITY, numStar); i++) {
			result = result + chosenStar;
			if (i % STAR_PER_LINE == STAR_PER_LINE - 1) {
				result = result + "<br>";
			}
		}
		return result;
	}

	/**
	 * wrap the content in <center> tag
	 * @param content
	 * @return
	 */
	public static String center(String content) {
		return "<center>" + content + "</center>";
	}

	/**
	 * make the content align to the right side
	 * @param content
	 * @return
	 */
	public static String right(String content) {
		return "<div align=\"right\">" + content + "</div>";
	}

	/**
	 * add format for the text
	 * @param content
	 * @param font
	 * @param size
	 * @param color
	 * @return
	 */
	public static String createHtmlText(final String content,
			final String font, final int size, final Color color) {
		return "<font face=\"" + font + "\" size=\"" + size + "\" color=\"#"
				+ convertColorToHex(color) + "\">" + content + "</font>";
	}

	/**
	 * add format for the text
	 * @param content
	 * @param font
	 * @param size
	 * @param hexColor
	 * @return
	 */
	public static String createHtmlText(String content, String font, int size,
			String hexColor) {
		return "<font face=\"" + font + "\" size=\"" + size + "\" color=\"#"
				+ hexColor + "\">" + content + "</font>";
	}

	/**
	 * convert Color to hex value
	 * @param color
	 * @return
	 */
	private static String convertColorToHex(Color color) {
		return convertIntToHex(color.getRed(), 2)
				+ convertIntToHex(color.getGreen(), 2)
				+ convertIntToHex(color.getBlue(), 2);
	}

	/**
	 * convert integer to hex value
	 * @param i
	 * @param length
	 * @return
	 */
	private static String convertIntToHex(int i, int length) {
		if (length == 0)
			return "";
		if ((0 <= i) && (i <= 9)) {
			return convertIntToHex(i / 16, length - 1) + (char) ('0' + i);
		} else if (i < 16) {
			return convertIntToHex(i / 16, length - 1) + (char) ('a' + i - 10);
		} else {
			return convertIntToHex(i / 16, length - 1)
					+ convertIntToHex(i % 16, length - 1);
		}
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzHtmlGenerator.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzTask.java
	 */


/**
 * this class represents a task
 */
public class EzTask {
	private int id;
	private String title;
	private GregorianCalendar startTime;
	private GregorianCalendar endTime;
	private String venue;
	private int priority;
	private boolean done;

	/**
	 * initialize a task by another task
	 * @param newTask
	 */
	public EzTask(EzTask newTask) {
		setId(newTask.getId());
		setTitle(newTask.getTitle());
		setStartTime(newTask.getStartTime());
		setEndTime(newTask.getEndTime());
		setVenue(newTask.getVenue());
		setPriority(newTask.getPriority());
		setDone(newTask.isDone());
	}

	/**
	 * create an empty task
	 */
	public EzTask() {
	}

	/**
	 * create a task with a title
	 * @param title
	 */
	public EzTask(String title) {
		setTitle(title);
	}

	/** 
	 * create a task with a title and a venue
	 * @param title
	 * @param venue
	 */
	public EzTask(String title, String venue) {
		this(title);
		setVenue(venue);
	}

	/**
	 * create a task with a title and a priority
	 * @param title
	 * @param priority
	 */
	public EzTask(String title, int priority) {
		this(title);
		setPriority(priority);
	}

	/**
	 * create a task with a title, a venue and a priority
	 * @param title
	 * @param venue
	 * @param priority
	 */
	public EzTask(String title, String venue, int priority) {
		this(title, venue);
		setPriority(priority);
	}

	/**
	 * @return the id of the task
	 */
	public int getId() {
		return id;
	}

	/**
	 * set the id for the task
	 * @param id
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * get the title of the task
	 * @return
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * set the title for the task
	 * @param title
	 */
	public void setTitle(String title) {
		if (title != null) {
			this.title = new String(title);
		} else {
			this.title = "";
		}
	}

	/**
	 * @return the start time of the task
	 */
	public GregorianCalendar getStartTime() {
		if (startTime != null) {
			return (GregorianCalendar) startTime.clone();
		} else {
			return null;
		}
	}

	/**
	 * set start time for the task
	 * @param startTime
	 */
	public void setStartTime(GregorianCalendar startTime) {
		if (startTime != null) {
			this.startTime = (GregorianCalendar) startTime.clone();
		} else {
			this.startTime = null;
		}
	}

	/**
	 * set start time for the task
	 * @param year
	 * @param month
	 * @param day
	 */
	public void setStartTime(int year, int month, int day) {
		if (this.startTime == null) {
			this.startTime = new GregorianCalendar(year, month, day);
		} else {
			this.startTime = (GregorianCalendar) this.startTime.clone();
			this.startTime.set(Calendar.YEAR, year);
			this.startTime.set(Calendar.MONTH, month);
			this.startTime.set(Calendar.DAY_OF_MONTH, day);
		}
	}

	/**
	 * set start time for the task
	 * @param hour
	 * @param minute
	 */
	public void setStartTime(int hour, int minute) {
		if (this.startTime == null) {
			this.startTime = new GregorianCalendar();
		} else {
			this.startTime = (GregorianCalendar) this.startTime.clone();
		}
		this.startTime.set(Calendar.HOUR_OF_DAY, hour);
		this.startTime.set(Calendar.MINUTE, minute);
	}

	/**
	 * set start time for the task
	 * @param year
	 * @param month
	 * @param day
	 * @param hour
	 * @param minute
	 */
	public void setStartTime(int year, int month, int day, int hour, int minute) {
		this.startTime = new GregorianCalendar(year, month, day, hour, minute);
	}

	/**
	 * @return the end time of the task
	 */
	public GregorianCalendar getEndTime() {
		if (endTime != null) {
			return (GregorianCalendar) endTime.clone();
		} else {
			return null;
		}
	}

	/**
	 * set end time for the task
	 * @param endTime
	 */
	public void setEndTime(GregorianCalendar endTime) {
		if (endTime != null) {
			this.endTime = (GregorianCalendar) endTime.clone();
		} else {
			this.endTime = null;
		}
	}

	/**
	 * set end time for the task
	 * @param year
	 * @param month
	 * @param day
	 */
	public void setEndTime(int year, int month, int day) {
		if (this.endTime == null) {
			this.endTime = new GregorianCalendar(year, month, day);
		} else {
			this.endTime = (GregorianCalendar) this.endTime.clone();
			this.endTime.set(Calendar.YEAR, year);
			this.endTime.set(Calendar.MONTH, month);
			this.endTime.set(Calendar.DAY_OF_MONTH, day);
		}
	}

	/**
	 * set end time for the task
	 * @param hour
	 * @param minute
	 */
	public void setEndTime(int hour, int minute) {
		if (this.endTime == null) {
			this.endTime = new GregorianCalendar();
		} else {
			this.endTime = (GregorianCalendar) this.endTime.clone();
		}
		this.endTime.set(Calendar.HOUR_OF_DAY, hour);
		this.endTime.set(Calendar.MINUTE, minute);
	}

	/**
	 * set end time for the task
	 * @param year
	 * @param month
	 * @param day
	 * @param hour
	 * @param minute
	 */
	public void setEndTime(int year, int month, int day, int hour, int minute) {
		this.endTime = new GregorianCalendar(year, month, day, hour, minute);
	}

	/**
	 * set the end time and the start as the same pointer
	 */
	public void setEndTimeAsStartTime() {
		this.endTime = this.startTime;
	}

	/**
	 * get the venue of the task
	 * @return
	 */
	public String getVenue() {
		if (venue == null) {
			return "";
		}
		return venue;
	}

	/**
	 * set the venue for the task
	 * @param venue
	 */
	public void setVenue(String venue) {
		if (venue != null) {
			this.venue = new String(venue);
		} else {
			this.venue = null;
		}
	}

	/**
	 * get the priority of the task
	 * @return
	 */
	public int getPriority() {
		return priority;
	}

	/**
	 * set the priority for the task
	 * @param priority
	 */
	public void setPriority(int priority) {
		this.priority = priority;
	}

	/**
	 * @return the status of the task
	 */
	public boolean isDone() {
		return done;
	}

	/**
	 * set the status for the task
	 * @param done
	 */
	public void setDone(boolean done) {
		this.done = done;
	}

	/**
	 * get the represented string of the task
	 */
	public String toString() {
		String idText = String.format("[#%d]", this.getId());

		String venueText = "";
		if (this.getVenue() != null) {
			if (venueText.length() > 30) {
				venueText = String.format("- @[%s]",
						this.getVenue().substring(0, 30))
						+ "...";
			} else {
				venueText = String.format("- @[%s]", this.getVenue());
			}
		}

		String titleText = "\"";
		if (this.getTitle().length() > 50) {
			titleText += this.getTitle().substring(0, 50) + "...";
		} else {
			titleText += this.getTitle();
		}
		titleText += "\"";

		String dateText = "";
		if (this.getStartTime() != null) {
			dateText = "- [";
			if (this.getStartTime() == this.getEndTime()) {
				GregorianCalendar time = this.getStartTime();
				dateText += String.format("%d/%d/%d",
						time.get(Calendar.DAY_OF_MONTH),
						time.get(Calendar.MONTH) + 1, time.get(Calendar.YEAR));
				if ((time.get(Calendar.HOUR_OF_DAY) != 0)
						|| (time.get(Calendar.MINUTE) != 0)) {
					dateText += " "
							+ String.format("%02d:%02d",
									time.get(Calendar.HOUR_OF_DAY),
									time.get(Calendar.MINUTE));
				}
			} else {
				GregorianCalendar startTime = this.getStartTime();
				GregorianCalendar endTime = this.getEndTime();

				if ((startTime.get(Calendar.HOUR_OF_DAY) != 0)
						|| (startTime.get(Calendar.MINUTE) != 0)
						|| (endTime.get(Calendar.HOUR_OF_DAY) != 0)
						|| (endTime.get(Calendar.MINUTE) != 0)) {
					dateText += String.format(
							"%d/%d/%d %02d:%02d => %d/%d/%d %02d:%02d",
							startTime.get(Calendar.DAY_OF_MONTH),
							startTime.get(Calendar.MONTH) + 1,
							startTime.get(Calendar.YEAR),
							startTime.get(Calendar.HOUR_OF_DAY),
							startTime.get(Calendar.MINUTE),
							endTime.get(Calendar.DAY_OF_MONTH),
							endTime.get(Calendar.MONTH) + 1,
							endTime.get(Calendar.YEAR),
							endTime.get(Calendar.HOUR_OF_DAY),
							endTime.get(Calendar.MINUTE));
				} else {
					dateText += String.format("%d/%d/%d => %d/%d/%d",
							startTime.get(Calendar.DAY_OF_MONTH),
							startTime.get(Calendar.MONTH) + 1,
							startTime.get(Calendar.YEAR),
							endTime.get(Calendar.DAY_OF_MONTH),
							endTime.get(Calendar.MONTH) + 1,
							endTime.get(Calendar.YEAR));
				}
			}
			dateText += "]";
		}
		return String.format("%s %s %s %s", idText, titleText, venueText,
				dateText);
	}

	/**
	 * check if the task is in the past or not
	 * @return
	 */
	public boolean isPast() {
		if (this.getEndTime() == null) {
			return false;
		} else {
			GregorianCalendar today = new GregorianCalendar();
			return this.getEndTime().before(today);
		}
	}

	/**
	 * check if the task is on today or not
	 * @return
	 */
	public boolean isToday() {
		if (this.getStartTime() == null) {
			return false;
		} else {
			GregorianCalendar startToday = new GregorianCalendar();
			startToday.set(Calendar.HOUR_OF_DAY, 0);
			startToday.set(Calendar.MINUTE, 0);
			startToday.set(Calendar.SECOND, 0);
			startToday.set(Calendar.MILLISECOND, 0);
			GregorianCalendar endToday = new GregorianCalendar();
			endToday.set(Calendar.HOUR_OF_DAY, 23);
			endToday.set(Calendar.MINUTE, 59);
			endToday.set(Calendar.SECOND, 59);
			endToday.set(Calendar.MILLISECOND, 0);
			return ((this.getEndTime().after(startToday) || this.getEndTime()
					.equals(startToday)) && (this.getStartTime().before(
					endToday) || this.getStartTime().equals(endToday)));
		}
	}
}

	// End of segment: E:\Java Projects\CS2103T\src\EzTask.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\EzTaskTest.java
	 */

public class EzTaskTest {

	@Test
	public void test() {
		EzTask task = new EzTask();
		task.setStartTime(new GregorianCalendar());

		// set date 10/11/2014 at 23:23
		task.setStartTime(2014, 10, 10, 23, 23);

		// change time to 15:15
		task.setStartTime(15, 15);

		// check for 10/11/2014 at 15:15
		assertEquals("Check Year: ", 2014,
				task.getStartTime().get(Calendar.YEAR));
		assertEquals("Check Month: ", Calendar.NOVEMBER, task.getStartTime()
				.get(Calendar.MONTH));
		assertEquals("Check Day: ", 10,
				task.getStartTime().get(Calendar.DAY_OF_MONTH));
		assertEquals("Check Hour: ", 15,
				task.getStartTime().get(Calendar.HOUR_OF_DAY));
		assertEquals("Check Minute: ", 15,
				task.getStartTime().get(Calendar.MINUTE));

	}

}

	// End of segment: E:\Java Projects\CS2103T\src\EzTaskTest.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\TypeOfAction.java
	 */

public enum TypeOfAction {
	ADD, UPDATE, DELETE, DONE, UNDO, REDO, SHOW, HELP, INVALID, Y, N, UNDONE, SORT, REMOVE, PAGE
}

	// End of segment: E:\Java Projects\CS2103T\src\TypeOfAction.java





	/**
	 * origin: E:\Java Projects\CS2103T\src\TypeOfSort.java
	 */

public enum TypeOfSort {
	ID, TITLE, VENUE, DATE, PRIORITY, DONE
}

	// End of segment: E:\Java Projects\CS2103T\src\TypeOfSort.java





